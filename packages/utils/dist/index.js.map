{"version":3,"sources":["../src/index.ts","../src/coordinate.ts","../src/animation.ts","../src/common.ts","../src/task.ts","../src/geoJson.ts"],"sourcesContent":["// 导出工具函数\nexport * from './coordinate';\nexport * from './animation';\nexport * from './common';\nexport * from './task';\nexport * from './geoJson';\n","/**\n * 坐标计算工具函数\n */\nimport { Coordinate, MapConfig } from '@orch-map/types';\n\n/**\n * 坐标工具类\n */\nexport class CoordinateUtils {\n  /**\n   * 计算两点之间的距离（米）\n   */\n  static getDistance(coord1: Coordinate, coord2: Coordinate): number {\n    const R = 6371000; // 地球半径（米）\n    const [lon1, lat1] = coord1;\n    const [lon2, lat2] = coord2;\n    \n    const φ1 = lat1 * Math.PI / 180;\n    const φ2 = lat2 * Math.PI / 180;\n    const Δφ = (lat2 - lat1) * Math.PI / 180;\n    const Δλ = (lon2 - lon1) * Math.PI / 180;\n\n    const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\n              Math.cos(φ1) * Math.cos(φ2) *\n              Math.sin(Δλ/2) * Math.sin(Δλ/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n    return R * c;\n  }\n\n  /**\n   * 计算两点之间的方位角（度）\n   */\n  static getBearing(coord1: Coordinate, coord2: Coordinate): number {\n    const [lon1, lat1] = coord1;\n    const [lon2, lat2] = coord2;\n    \n    const φ1 = lat1 * Math.PI / 180;\n    const φ2 = lat2 * Math.PI / 180;\n    const Δλ = (lon2 - lon1) * Math.PI / 180;\n\n    const y = Math.sin(Δλ) * Math.cos(φ2);\n    const x = Math.cos(φ1) * Math.sin(φ2) - Math.sin(φ1) * Math.cos(φ2) * Math.cos(Δλ);\n\n    const θ = Math.atan2(y, x);\n\n    return (θ * 180 / Math.PI + 360) % 360;\n  }\n\n  /**\n   * 计算中点坐标\n   */\n  static getMidpoint(coord1: Coordinate, coord2: Coordinate): Coordinate {\n    const [lon1, lat1] = coord1;\n    const [lon2, lat2] = coord2;\n    \n    const φ1 = lat1 * Math.PI / 180;\n    const φ2 = lat2 * Math.PI / 180;\n    const Δλ = (lon2 - lon1) * Math.PI / 180;\n\n    const Bx = Math.cos(φ2) * Math.cos(Δλ);\n    const By = Math.cos(φ2) * Math.sin(Δλ);\n    \n    const φ3 = Math.atan2(Math.sin(φ1) + Math.sin(φ2), \n                         Math.sqrt((Math.cos(φ1) + Bx) * (Math.cos(φ1) + Bx) + By * By));\n    const λ3 = (lon1 * Math.PI / 180) + Math.atan2(By, Math.cos(φ1) + Bx);\n\n    return [λ3 * 180 / Math.PI, φ3 * 180 / Math.PI];\n  }\n\n  /**\n   * 计算边界框\n   */\n  static getBounds(coordinates: Coordinate[]): [Coordinate, Coordinate] {\n    if (coordinates.length === 0) {\n      return [[0, 0], [0, 0]];\n    }\n\n    let minLng = coordinates[0][0];\n    let maxLng = coordinates[0][0];\n    let minLat = coordinates[0][1];\n    let maxLat = coordinates[0][1];\n\n    coordinates.forEach(([lng, lat]) => {\n      minLng = Math.min(minLng, lng);\n      maxLng = Math.max(maxLng, lng);\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n    });\n\n    return [[minLng, minLat], [maxLng, maxLat]];\n  }\n\n  /**\n   * 计算边界框中心点\n   */\n  static getBoundsCenter(bounds: [Coordinate, Coordinate]): Coordinate {\n    const [[minLng, minLat], [maxLng, maxLat]] = bounds;\n    return [(minLng + maxLng) / 2, (minLat + maxLat) / 2];\n  }\n\n  /**\n   * 根据边界框计算合适的缩放级别\n   */\n  static getZoomFromBounds(\n    bounds: [Coordinate, Coordinate],\n    containerSize: { width: number; height: number }\n  ): number {\n    const [[minLng, minLat], [maxLng, maxLat]] = bounds;\n    const lngDiff = Math.abs(maxLng - minLng);\n    const latDiff = Math.abs(maxLat - minLat);\n    \n    const lngZoom = Math.log2(360 / lngDiff);\n    const latZoom = Math.log2(180 / latDiff);\n    \n    return Math.min(lngZoom, latZoom, 18); // 最大缩放级别18\n  }\n\n  /**\n   * 生成二次贝塞尔曲线路径点\n   */\n  static generateBezierPath(\n    start: Coordinate,\n    end: Coordinate,\n    curvature = 0.3,\n    segments = 64\n  ): Coordinate[] {\n    const [sx, sy] = start;\n    const [ex, ey] = end;\n    const mx = (sx + ex) / 2;\n    const my = (sy + ey) / 2;\n    \n    // 计算垂直方向的控制点偏移\n    const dx = ex - sx;\n    const dy = ey - sy;\n    const length = Math.hypot(dx, dy) || 1;\n    const nx = -dy / length;\n    const ny = dx / length;\n    \n    const offset = curvature * length * 0.3;\n    const cx = mx + nx * offset;\n    const cy = my + ny * offset;\n\n    const path: Coordinate[] = [];\n    for (let i = 0; i <= segments; i++) {\n      const t = i / segments;\n      const oneMinusT = 1 - t;\n      const x = oneMinusT * oneMinusT * sx + 2 * oneMinusT * t * cx + t * t * ex;\n      const y = oneMinusT * oneMinusT * sy + 2 * oneMinusT * t * cy + t * t * ey;\n      path.push([x, y]);\n    }\n    \n    return path;\n  }\n\n  /**\n   * 计算曲率值（基于距离和角度）\n   */\n  static calculateCurvature(start: Coordinate, end: Coordinate): number {\n    const distance = this.getDistance(start, end);\n    // 基于距离计算曲率，距离越远曲率越大\n    const baseCurvature = Math.min(distance / 1000000, 1); // 最大曲率为1\n    return baseCurvature * 0.5; // 适中的曲率值\n  }\n}\n\n/**\n * 曲率计算器类\n */\nexport class CurvatureCalculator {\n  private curvatureCache: Map<string, number> = new Map();\n\n  /**\n   * 根据坐标计算曲率\n   */\n  calculateCurvatureByCoordinates(\n    id: string,\n    start: Coordinate,\n    end: Coordinate\n  ): number {\n    if (this.curvatureCache.has(id)) {\n      return this.curvatureCache.get(id)!;\n    }\n\n    const curvature = CoordinateUtils.calculateCurvature(start, end);\n    this.curvatureCache.set(id, curvature);\n    return curvature;\n  }\n\n  /**\n   * 清除缓存\n   */\n  clearCache(): void {\n    this.curvatureCache.clear();\n  }\n}","/**\n * 动画工具函数\n */\nimport { AnimationConfig } from \"./animation.interface\";\n\n/**\n * 缓动函数\n */\nexport const easing = {\n  linear: (t: number): number => t,\n  easeInQuad: (t: number): number => t * t,\n  easeOutQuad: (t: number): number => t * (2 - t),\n  easeInOutQuad: (t: number): number => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: (t: number): number => t * t * t,\n  easeOutCubic: (t: number): number => (--t) * t * t + 1,\n  easeInOutCubic: (t: number): number => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n};\n\n/**\n * 动画管理器类\n */\nexport class AnimationManager {\n  private animations: Map<string, Animation> = new Map();\n  private rafId: number | null = null;\n\n  /**\n   * 创建动画\n   */\n  create(\n    id: string,\n    config: AnimationConfig\n  ): void {\n    const animation = new Animation(config);\n    this.animations.set(id, animation);\n\n    if (!this.rafId) {\n      this.start();\n    }\n  }\n\n  /**\n   * 停止动画\n   */\n  stop(id: string): void {\n    this.animations.delete(id);\n\n    if (this.animations.size === 0 && this.rafId) {\n      cancelAnimationFrame(this.rafId);\n      this.rafId = null;\n    }\n  }\n\n  /**\n   * 停止所有动画\n   */\n  stopAll(): void {\n    this.animations.clear();\n\n    if (this.rafId) {\n      cancelAnimationFrame(this.rafId);\n      this.rafId = null;\n    }\n  }\n\n  /**\n   * 开始动画循环\n   */\n  private start(): void {\n    const animate = (currentTime: number) => {\n      const completedAnimations: string[] = [];\n\n      this.animations.forEach((animation, id) => {\n        const isComplete = animation.update(currentTime);\n        if (isComplete) {\n          completedAnimations.push(id);\n        }\n      });\n\n      // 清理已完成的动画\n      completedAnimations.forEach(id => {\n        this.animations.delete(id);\n      });\n\n      if (this.animations.size > 0) {\n        this.rafId = requestAnimationFrame(animate);\n      } else {\n        this.rafId = null;\n      }\n    };\n\n    this.rafId = requestAnimationFrame(animate);\n  }\n}\n\n/**\n * 动画类\n */\nexport class Animation {\n  private startTime: number | null = null;\n  private config: AnimationConfig;\n\n  constructor(config: AnimationConfig) {\n    this.config = {\n      ...config,\n      enabled: config.enabled ?? true,\n      duration: config.duration ?? 1000,\n      easing: config.easing ?? \"easeInOutQuad\",\n      delay: config.delay ?? 0,\n      type: config.type ?? \"fadeIn\",\n    };\n  }\n\n  /**\n   * 更新动画\n   */\n  update(currentTime: number): boolean {\n    if (!this.startTime) {\n      this.startTime = currentTime;\n    }\n\n    const elapsed = currentTime - this.startTime;\n    const duration = this.config.duration || 1000;\n\n    let progress = Math.min(elapsed / duration, 1);\n\n    // 应用缓动函数\n    const easingFn = easing[this.config.easing as keyof typeof easing] || easing.linear;\n    progress = easingFn(progress);\n\n    // 计算当前值\n    const value = this.config.from + (this.config.to - this.config.from) * progress;\n    this.config.onUpdate?.(progress, value);\n\n    // 检查是否完成\n    if (elapsed >= duration) {\n      if (this.config.loop) {\n        this.startTime = currentTime;\n        return false;\n      } else {\n        this.config.onComplete?.();\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\n/**\n * 全局动画管理器实例\n */\nexport const animationManager = new AnimationManager();","export { omit, pick } from \"lodash\"\n\n\n/**\n * 判断值是否已定义\n */\nexport function isDef<T>(value: T | undefined | null): value is T {\n  return value !== undefined && value !== null;\n}\n\n/**\n * 判断数组是否为空\n */\nexport function isEmptyArray<T>(arr: T[] | undefined | null): arr is [] | undefined | null {\n  return !Array.isArray(arr) || arr.length === 0;\n}\n\n/**\n * 判断值是否未定义\n */\nexport function isUndef(value: any): value is undefined | null {\n  return value === undefined || value === null;\n}\n\n/**\n * 深拷贝对象\n */\nexport function deepClone<T>(obj: T): T {\n  if (obj === null || typeof obj !== \"object\") return obj;\n  if (obj instanceof Date) return new Date(obj.getTime()) as any;\n  if (obj instanceof Array) return obj.map(item => deepClone(item)) as any;\n  if (typeof obj === \"object\") {\n    const clonedObj = {} as any;\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        clonedObj[key] = deepClone(obj[key]);\n      }\n    }\n    return clonedObj;\n  }\n  return obj;\n}\n\n/**\n * 防抖函数\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  fn: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => fn(...args), delay);\n  };\n}\n\n/**\n * 节流函数\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  fn: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let lastTime = 0;\n  return (...args: Parameters<T>) => {\n    const now = Date.now();\n    if (now - lastTime >= delay) {\n      lastTime = now;\n      fn(...args);\n    }\n  };\n}\n\n\n/**\n * 生成唯一ID\n */\nexport function generateId(prefix = 'id'): string {\n  return `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * 颜色工具函数\n */\nexport const colorUtils = {\n  /**\n   * 将十六进制颜色转换为 RGBA 数组\n   */\n  hexToRgba(hex: string, alpha = 255): [number, number, number, number] {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return [r, g, b, alpha];\n  },\n\n  /**\n   * 将 RGBA 数组转换为十六进制颜色\n   */\n  rgbaToHex(rgba: [number, number, number, number]): string {\n    const [r, g, b] = rgba;\n    return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;\n  },\n\n  /**\n   * 插值两个颜色\n   */\n  interpolateColor(\n    color1: [number, number, number, number],\n    color2: [number, number, number, number],\n    t: number\n  ): [number, number, number, number] {\n    const [r1, g1, b1, a1] = color1;\n    const [r2, g2, b2, a2] = color2;\n    return [\n      Math.round(r1 + (r2 - r1) * t),\n      Math.round(g1 + (g2 - g1) * t),\n      Math.round(b1 + (b2 - b1) * t),\n      Math.round(a1 + (a2 - a1) * t),\n    ];\n  }\n};\n","/**\n * 任务管理工具\n */\n\nexport interface TimerTask {\n  destroy(): void;\n}\n\nexport interface TaskOptions {\n  description: string;\n  time: number;\n  once: boolean;\n  fn: () => void;\n}\n\n/**\n * 任务管理器类\n */\nexport class TaskManager {\n  static Timer = class Timer implements TimerTask {\n    #timerId: NodeJS.Timeout | number | null = null;\n    #options: TaskOptions;\n\n    constructor(options: TaskOptions) {\n      this.#options = options;\n      this.#start();\n    }\n\n    #start() {\n      if (this.#options.once) {\n        this.#timerId = setTimeout(this.#options.fn, this.#options.time);\n      } else {\n        this.#timerId = setInterval(this.#options.fn, this.#options.time);\n      }\n    }\n\n    destroy() {\n      if (this.#timerId) {\n        if (this.#options.once) {\n          clearTimeout(this.#timerId as NodeJS.Timeout);\n        } else {\n          clearInterval(this.#timerId as NodeJS.Timeout);\n        }\n        this.#timerId = null;\n      }\n    }\n  };\n}\n\n/**\n * 默认导出 TaskManager（兼容原有代码）\n */\nexport default TaskManager;","/**\n * GeoJSON 工具函数\n */\nimport { Coordinate, GeoJsonFeature, HcTransform } from '@orch-map/types';\n\n/**\n * GeoJSON 工具类\n */\nexport class GeoJsonUtils {\n  /**\n   * 检查点是否在多边形内（使用射线算法）\n   */\n  static isPointInPolygon(point: Coordinate, polygon: number[][]): boolean {\n    const [x, y] = point;\n    let inside = false;\n    \n    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n      const [xi, yi] = polygon[i];\n      const [xj, yj] = polygon[j];\n      \n      if (((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) {\n        inside = !inside;\n      }\n    }\n    \n    return inside;\n  }\n\n  /**\n   * 检查点是否在 GeoJSON 特征内\n   */\n  static isPointInFeature(point: Coordinate, feature: GeoJsonFeature): boolean {\n    const { geometry } = feature;\n    \n    if (geometry.type === 'Polygon') {\n      return this.isPointInPolygon(point, geometry.coordinates[0]);\n    }\n    \n    if (geometry.type === 'MultiPolygon') {\n      return geometry.coordinates.some((polygon: number[][][]) => \n        this.isPointInPolygon(point, polygon[0])\n      );\n    }\n    \n    return false;\n  }\n\n  /**\n   * 将经纬度转换为投影坐标\n   */\n  static lngLatToProjected(\n    transform: HcTransform,\n    lngLat: Coordinate\n  ): Coordinate {\n    if (!transform?.default) {\n      return lngLat;\n    }\n    \n    const { scale, translate } = transform.default;\n    const [lng, lat] = lngLat;\n    \n    return [\n      lng * scale[0] + translate[0],\n      lat * scale[1] + translate[1]\n    ];\n  }\n\n  /**\n   * 计算多边形的中心点\n   */\n  static getPolygonCenter(coordinates: number[][][]): Coordinate {\n    if (!coordinates || coordinates.length === 0) {\n      return [0, 0];\n    }\n\n    const ring = coordinates[0]; // 外环\n    if (!ring || ring.length === 0) {\n      return [0, 0];\n    }\n\n    let x = 0;\n    let y = 0;\n    let area = 0;\n\n    for (let i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n      const xi = ring[i][0];\n      const yi = ring[i][1];\n      const xj = ring[j][0];\n      const yj = ring[j][1];\n      \n      const a = xi * yj - xj * yi;\n      area += a;\n      x += (xi + xj) * a;\n      y += (yi + yj) * a;\n    }\n\n    area *= 0.5;\n    return area === 0 ? [0, 0] : [x / (6.0 * area), y / (6.0 * area)];\n  }\n\n  /**\n   * 计算 GeoJSON 特征的边界框\n   */\n  static getBounds(feature: GeoJsonFeature): [Coordinate, Coordinate] {\n    const { geometry } = feature;\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    const processCoordinate = (coord: number[]) => {\n      const [x, y] = coord;\n      minX = Math.min(minX, x);\n      minY = Math.min(minY, y);\n      maxX = Math.max(maxX, x);\n      maxY = Math.max(maxY, y);\n    };\n\n    const processCoordinates = (coords: any) => {\n      if (typeof coords[0] === 'number') {\n        processCoordinate(coords);\n      } else {\n        coords.forEach(processCoordinates);\n      }\n    };\n\n    processCoordinates(geometry.coordinates);\n\n    return [[minX, minY], [maxX, maxY]];\n  }\n\n  /**\n   * 创建空的 GeoJSON FeatureCollection\n   */\n  static createFeatureCollection(features: GeoJsonFeature[] = []) {\n    return {\n      type: 'FeatureCollection' as const,\n      features\n    };\n  }\n\n  /**\n   * 创建 GeoJSON Point 特征\n   */\n  static createPointFeature(\n    coordinate: Coordinate,\n    properties: Record<string, any> = {}\n  ): GeoJsonFeature {\n    return {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: coordinate\n      },\n      properties\n    };\n  }\n\n  /**\n   * 创建 GeoJSON LineString 特征\n   */\n  static createLineFeature(\n    coordinates: Coordinate[],\n    properties: Record<string, any> = {}\n  ): GeoJsonFeature {\n    return {\n      type: 'Feature',\n      geometry: {\n        type: 'LineString',\n        coordinates\n      },\n      properties\n    };\n  }\n}"],"mappings":"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","names":[]}