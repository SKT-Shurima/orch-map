{"version":3,"sources":["../src/index.ts","../src/map-registry.ts","../src/theme-manager.ts","../src/animation-manager.ts","../src/tooltip-manager.ts","../src/geo.ts","../src/geo-utils.ts","../src/data-visualization.ts","../src/interactive-features.ts"],"sourcesContent":["// 导出核心功能\nexport { Geo } from './geo';\nexport { MapRegistry } from './map-registry';\nexport { GeoUtils } from './geo-utils';\nexport { ThemeManager } from './theme-manager';\nexport { AnimationManager } from './animation-manager';\nexport { TooltipManager } from './tooltip-manager';\nexport { DataVisualization } from './data-visualization';\nexport { InteractiveFeatures } from './interactive-features';\n\n// 重新导出类型\nexport type {\n  GeoConfig,\n  GeoData,\n  GeoEventHandlers,\n  GeoSeriesConfig,\n  MapConfig,\n  DataPoint,\n  ThemeConfig,\n  AnimationConfig,\n  TooltipConfig,\n  LegendConfig\n} from '@orch-map/types';\n\n","/**\n * 地图数据注册管理器\n * 用于管理和注册各种地图数据\n */\nexport class MapRegistry {\n  private static instance: MapRegistry;\n  private registeredMaps: Map<string, any> = new Map();\n  private echartsInstance: any = null;\n\n  private constructor() {}\n\n  public static getInstance(): MapRegistry {\n    if (!MapRegistry.instance) {\n      MapRegistry.instance = new MapRegistry();\n    }\n    return MapRegistry.instance;\n  }\n\n  /**\n   * 设置 ECharts 实例\n   */\n  public setEChartsInstance(echarts: any): void {\n    this.echartsInstance = echarts;\n  }\n\n  /**\n   * 注册地图数据\n   */\n  public async registerMap(mapName: string, mapData: any): Promise<void> {\n    if (!this.echartsInstance) {\n      const echarts = await import('echarts');\n      this.echartsInstance = echarts;\n    }\n\n    this.echartsInstance.registerMap(mapName, mapData);\n    this.registeredMaps.set(mapName, mapData);\n  }\n\n  /**\n   * 检查地图是否已注册\n   */\n  public isMapRegistered(mapName: string): boolean {\n    return this.registeredMaps.has(mapName);\n  }\n\n  /**\n   * 获取已注册的地图数据\n   */\n  public getMapData(mapName: string): any {\n    return this.registeredMaps.get(mapName);\n  }\n\n  /**\n   * 获取所有已注册的地图名称\n   */\n  public getRegisteredMapNames(): string[] {\n    return Array.from(this.registeredMaps.keys());\n  }\n\n  /**\n   * 移除地图注册\n   */\n  public unregisterMap(mapName: string): void {\n    this.registeredMaps.delete(mapName);\n  }\n\n  /**\n   * 清空所有注册的地图\n   */\n  public clear(): void {\n    this.registeredMaps.clear();\n  }\n\n  /**\n   * 批量注册地图数据\n   */\n  public async registerMaps(mapDataMap: Record<string, any>): Promise<void> {\n    const promises = Object.entries(mapDataMap).map(([name, data]) =>\n      this.registerMap(name, data)\n    );\n    await Promise.all(promises);\n  }\n}\n","import type { ThemeConfig } from '@orch-map/types';\n\n/**\n * 主题管理器\n * 提供预设主题和自定义主题功能\n */\nexport class ThemeManager {\n  private static instance: ThemeManager;\n  private themes: Map<string, ThemeConfig> = new Map();\n  private currentTheme: string = 'default';\n\n  private constructor() {\n    this.initializeDefaultThemes();\n  }\n\n  public static getInstance(): ThemeManager {\n    if (!ThemeManager.instance) {\n      ThemeManager.instance = new ThemeManager();\n    }\n    return ThemeManager.instance;\n  }\n\n  /**\n   * 初始化默认主题\n   */\n  private initializeDefaultThemes(): void {\n    // 默认主题\n    this.registerTheme({\n      name: 'default',\n      colors: {\n        primary: '#5470c6',\n        secondary: '#91cc75',\n        background: '#ffffff',\n        text: '#333333',\n        border: '#cccccc',\n        area: '#f0f0f0',\n        emphasis: '#ff6b6b',\n        select: '#4ecdc4'\n      },\n      fonts: {\n        family: 'Arial, sans-serif',\n        size: 12,\n        weight: 'normal'\n      },\n      effects: {\n        shadow: false,\n        gradient: false,\n        animation: true\n      }\n    });\n\n    // 深色主题\n    this.registerTheme({\n      name: 'dark',\n      colors: {\n        primary: '#5dade2',\n        secondary: '#58d68d',\n        background: '#2c3e50',\n        text: '#ecf0f1',\n        border: '#34495e',\n        area: '#34495e',\n        emphasis: '#e74c3c',\n        select: '#f39c12'\n      },\n      fonts: {\n        family: 'Arial, sans-serif',\n        size: 12,\n        weight: 'normal'\n      },\n      effects: {\n        shadow: true,\n        gradient: true,\n        animation: true\n      }\n    });\n\n    // 科技主题\n    this.registerTheme({\n      name: 'tech',\n      colors: {\n        primary: '#00d4ff',\n        secondary: '#00ff88',\n        background: '#0a0a0a',\n        text: '#00ff88',\n        border: '#00d4ff',\n        area: '#1a1a1a',\n        emphasis: '#ff0080',\n        select: '#ffaa00'\n      },\n      fonts: {\n        family: 'Consolas, monospace',\n        size: 11,\n        weight: 'bold'\n      },\n      effects: {\n        shadow: true,\n        gradient: true,\n        animation: true\n      }\n    });\n\n    // 自然主题\n    this.registerTheme({\n      name: 'nature',\n      colors: {\n        primary: '#2ecc71',\n        secondary: '#f39c12',\n        background: '#f8f9fa',\n        text: '#2c3e50',\n        border: '#95a5a6',\n        area: '#ecf0f1',\n        emphasis: '#e74c3c',\n        select: '#9b59b6'\n      },\n      fonts: {\n        family: 'Georgia, serif',\n        size: 13,\n        weight: 'normal'\n      },\n      effects: {\n        shadow: false,\n        gradient: true,\n        animation: true\n      }\n    });\n\n    // 商务主题\n    this.registerTheme({\n      name: 'business',\n      colors: {\n        primary: '#34495e',\n        secondary: '#3498db',\n        background: '#ffffff',\n        text: '#2c3e50',\n        border: '#bdc3c7',\n        area: '#f8f9fa',\n        emphasis: '#e74c3c',\n        select: '#f39c12'\n      },\n      fonts: {\n        family: 'Helvetica, Arial, sans-serif',\n        size: 12,\n        weight: '500'\n      },\n      effects: {\n        shadow: true,\n        gradient: false,\n        animation: false\n      }\n    });\n  }\n\n  /**\n   * 注册主题\n   */\n  public registerTheme(theme: ThemeConfig): void {\n    this.themes.set(theme.name, theme);\n  }\n\n  /**\n   * 获取主题\n   */\n  public getTheme(name: string): ThemeConfig | undefined {\n    return this.themes.get(name);\n  }\n\n  /**\n   * 获取所有主题名称\n   */\n  public getThemeNames(): string[] {\n    return Array.from(this.themes.keys());\n  }\n\n  /**\n   * 设置当前主题\n   */\n  public setCurrentTheme(name: string): boolean {\n    if (this.themes.has(name)) {\n      this.currentTheme = name;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * 获取当前主题\n   */\n  public getCurrentTheme(): ThemeConfig | undefined {\n    return this.themes.get(this.currentTheme);\n  }\n\n  /**\n   * 获取当前主题名称\n   */\n  public getCurrentThemeName(): string {\n    return this.currentTheme;\n  }\n\n  /**\n   * 删除主题\n   */\n  public removeTheme(name: string): boolean {\n    if (name === 'default') {\n      return false; // 不能删除默认主题\n    }\n    return this.themes.delete(name);\n  }\n\n  /**\n   * 应用主题到 ECharts 配置\n   */\n  public applyTheme(theme: ThemeConfig, baseConfig: any = {}): any {\n    const config = { ...baseConfig };\n\n    // 应用颜色\n    if (config.geo) {\n      config.geo.itemStyle = {\n        ...config.geo.itemStyle,\n        areaColor: theme.colors.area,\n        borderColor: theme.colors.border,\n        color: theme.colors.primary\n      };\n\n      config.geo.emphasis = {\n        ...config.geo.emphasis,\n        itemStyle: {\n          ...config.geo.emphasis?.itemStyle,\n          areaColor: theme.colors.emphasis\n        }\n      };\n\n      config.geo.select = {\n        ...config.geo.select,\n        itemStyle: {\n          ...config.geo.select?.itemStyle,\n          areaColor: theme.colors.select\n        }\n      };\n    }\n\n    // 应用字体\n    const textStyle = {\n      fontFamily: theme.fonts.family,\n      fontSize: theme.fonts.size,\n      fontWeight: theme.fonts.weight,\n      color: theme.colors.text\n    };\n\n    if (config.tooltip) {\n      config.tooltip.textStyle = {\n        ...config.tooltip.textStyle,\n        ...textStyle\n      };\n    }\n\n    if (config.legend) {\n      config.legend.textStyle = {\n        ...config.legend.textStyle,\n        ...textStyle\n      };\n    }\n\n    // 应用效果\n    if (theme.effects.shadow) {\n      const shadowStyle = {\n        shadowBlur: 10,\n        shadowColor: 'rgba(0, 0, 0, 0.3)',\n        shadowOffsetX: 2,\n        shadowOffsetY: 2\n      };\n\n      if (config.geo?.itemStyle) {\n        config.geo.itemStyle = { ...config.geo.itemStyle, ...shadowStyle };\n      }\n    }\n\n    if (theme.effects.gradient) {\n      const gradientStyle = {\n        color: {\n          type: 'linear',\n          x: 0,\n          y: 0,\n          x2: 1,\n          y2: 1,\n          colorStops: [\n            { offset: 0, color: theme.colors.primary },\n            { offset: 1, color: theme.colors.secondary }\n          ]\n        }\n      };\n\n      if (config.geo?.itemStyle) {\n        config.geo.itemStyle = { ...config.geo.itemStyle, ...gradientStyle };\n      }\n    }\n\n    return config;\n  }\n\n  /**\n   * 创建自定义主题\n   */\n  public createCustomTheme(\n    name: string,\n    baseTheme: string = 'default',\n    overrides: Partial<ThemeConfig> = {}\n  ): ThemeConfig {\n    const base = this.getTheme(baseTheme) || this.getTheme('default')!;\n    const customTheme: ThemeConfig = {\n      ...base,\n      ...overrides,\n      name,\n      colors: { ...base.colors, ...overrides.colors },\n      fonts: { ...base.fonts, ...overrides.fonts },\n      effects: { ...base.effects, ...overrides.effects }\n    };\n\n    this.registerTheme(customTheme);\n    return customTheme;\n  }\n}\n","import type { AnimationConfig } from '@orch-map/types';\n\n/**\n * 动画管理器\n * 提供各种动画效果和配置\n */\nexport class AnimationManager {\n  private static instance: AnimationManager;\n  private animations: Map<string, AnimationConfig> = new Map();\n\n  private constructor() {\n    this.initializeDefaultAnimations();\n  }\n\n  public static getInstance(): AnimationManager {\n    if (!AnimationManager.instance) {\n      AnimationManager.instance = new AnimationManager();\n    }\n    return AnimationManager.instance;\n  }\n\n  /**\n   * 初始化默认动画配置\n   */\n  private initializeDefaultAnimations(): void {\n    // 淡入动画\n    this.registerAnimation({\n      name: 'fadeIn',\n      enabled: true,\n      duration: 1000,\n      easing: 'cubicOut',\n      delay: 0,\n      type: 'fadeIn'\n    });\n\n    // 滑入动画\n    this.registerAnimation({\n      name: 'slideIn',\n      enabled: true,\n      duration: 800,\n      easing: 'cubicOut',\n      delay: 100,\n      type: 'slideIn'\n    });\n\n    // 缩放动画\n    this.registerAnimation({\n      name: 'zoomIn',\n      enabled: true,\n      duration: 600,\n      easing: 'backOut',\n      delay: 0,\n      type: 'zoomIn'\n    });\n\n    // 弹跳动画\n    this.registerAnimation({\n      name: 'bounce',\n      enabled: true,\n      duration: 1200,\n      easing: 'bounceOut',\n      delay: 200,\n      type: 'bounce'\n    });\n\n    // 快速动画\n    this.registerAnimation({\n      name: 'quick',\n      enabled: true,\n      duration: 300,\n      easing: 'cubicOut',\n      delay: 0,\n      type: 'fadeIn'\n    });\n\n    // 慢速动画\n    this.registerAnimation({\n      name: 'slow',\n      enabled: true,\n      duration: 2000,\n      easing: 'cubicInOut',\n      delay: 0,\n      type: 'fadeIn'\n    });\n  }\n\n  /**\n   * 注册动画配置\n   */\n  public registerAnimation(animation: AnimationConfig & { name: string }): void {\n    this.animations.set(animation.name, animation);\n  }\n\n  /**\n   * 获取动画配置\n   */\n  public getAnimation(name: string): (AnimationConfig & { name: string }) | undefined {\n    return this.animations.get(name) as (AnimationConfig & { name: string }) | undefined;\n  }\n\n  /**\n   * 获取所有动画名称\n   */\n  public getAnimationNames(): string[] {\n    return Array.from(this.animations.keys());\n  }\n\n  /**\n   * 应用动画到 ECharts 配置\n   */\n  public applyAnimation(animation: AnimationConfig, baseConfig: any = {}): any {\n    if (!animation.enabled) {\n      return baseConfig;\n    }\n\n    const config = { ...baseConfig };\n\n    // 应用动画到系列\n    if (config.series) {\n      config.series = config.series.map((series: any) => ({\n        ...series,\n        animation: true,\n        animationDuration: animation.duration,\n        animationEasing: animation.easing,\n        animationDelay: animation.delay,\n        animationType: this.getAnimationType(animation.type)\n      }));\n    }\n\n    // 应用动画到 Geo\n    if (config.geo) {\n      config.geo.animation = true;\n      config.geo.animationDuration = animation.duration;\n      config.geo.animationEasing = animation.easing;\n      config.geo.animationDelay = animation.delay;\n    }\n\n    // 应用动画到提示框\n    if (config.tooltip) {\n      config.tooltip.animation = true;\n      config.tooltip.animationDuration = animation.duration;\n      config.tooltip.animationEasing = animation.easing;\n    }\n\n    return config;\n  }\n\n  /**\n   * 获取动画类型对应的 ECharts 动画类型\n   */\n  private getAnimationType(type?: string): string {\n    switch (type) {\n      case 'fadeIn':\n        return 'fadeIn';\n      case 'slideIn':\n        return 'slideIn';\n      case 'zoomIn':\n        return 'scale';\n      case 'bounce':\n        return 'bounce';\n      default:\n        return 'fadeIn';\n    }\n  }\n\n  /**\n   * 创建数据加载动画\n   */\n  public createDataLoadingAnimation(data: any[], animation: AnimationConfig): any[] {\n    if (!animation.enabled) {\n      return data;\n    }\n\n    return data.map((item, index) => ({\n      ...item,\n      animationDelay: (animation.delay || 0) + (index * 50), // 错开动画时间\n      animationDuration: animation.duration,\n      animationEasing: animation.easing\n    }));\n  }\n\n  /**\n   * 创建区域切换动画\n   */\n  public createRegionSwitchAnimation(\n    fromRegion: string,\n    toRegion: string,\n    animation: AnimationConfig\n  ): any {\n    if (!animation.enabled) {\n      return {};\n    }\n\n    return {\n      animation: true,\n      animationDuration: animation.duration,\n      animationEasing: animation.easing,\n      animationDelay: animation.delay,\n      transition: {\n        from: fromRegion,\n        to: toRegion,\n        duration: animation.duration,\n        easing: animation.easing\n      }\n    };\n  }\n\n  /**\n   * 创建数据更新动画\n   */\n  public createDataUpdateAnimation(\n    oldData: any[],\n    newData: any[],\n    animation: AnimationConfig\n  ): any {\n    if (!animation.enabled) {\n      return { data: newData };\n    }\n\n    return {\n      data: newData,\n      animation: true,\n      animationDuration: animation.duration,\n      animationEasing: animation.easing,\n      animationDelay: animation.delay,\n      animationType: 'update'\n    };\n  }\n\n  /**\n   * 创建自定义动画\n   */\n  public createCustomAnimation(\n    name: string,\n    baseAnimation: string = 'fadeIn',\n    overrides: Partial<AnimationConfig> = {}\n  ): AnimationConfig & { name: string } {\n    const base = this.getAnimation(baseAnimation) || this.getAnimation('fadeIn')!;\n    const customAnimation = {\n      ...base,\n      ...overrides,\n      name\n    };\n\n    this.registerAnimation(customAnimation);\n    return customAnimation;\n  }\n\n  /**\n   * 获取动画缓动函数\n   */\n  public getEasingFunctions(): string[] {\n    return [\n      'linear',\n      'quadraticIn',\n      'quadraticOut',\n      'quadraticInOut',\n      'cubicIn',\n      'cubicOut',\n      'cubicInOut',\n      'quarticIn',\n      'quarticOut',\n      'quarticInOut',\n      'quinticIn',\n      'quinticOut',\n      'quinticInOut',\n      'sinusoidalIn',\n      'sinusoidalOut',\n      'sinusoidalInOut',\n      'exponentialIn',\n      'exponentialOut',\n      'exponentialInOut',\n      'circularIn',\n      'circularOut',\n      'circularInOut',\n      'elasticIn',\n      'elasticOut',\n      'elasticInOut',\n      'backIn',\n      'backOut',\n      'backInOut',\n      'bounceIn',\n      'bounceOut',\n      'bounceInOut'\n    ];\n  }\n}\n","import type { TooltipConfig } from '@orch-map/types';\n\n/**\n * 提示框管理器\n * 提供丰富的提示框功能和自定义模板\n */\nexport class TooltipManager {\n  private static instance: TooltipManager;\n  private tooltips: Map<string, TooltipConfig> = new Map();\n\n  private constructor() {\n    this.initializeDefaultTooltips();\n  }\n\n  public static getInstance(): TooltipManager {\n    if (!TooltipManager.instance) {\n      TooltipManager.instance = new TooltipManager();\n    }\n    return TooltipManager.instance;\n  }\n\n  /**\n   * 初始化默认提示框配置\n   */\n  private initializeDefaultTooltips(): void {\n    // 默认提示框\n    this.registerTooltip({\n      name: 'default',\n      enabled: true,\n      trigger: 'item',\n      backgroundColor: 'rgba(0, 0, 0, 0.8)',\n      borderColor: '#333',\n      textStyle: {\n        color: '#fff',\n        fontSize: 12\n      },\n      position: 'top'\n    });\n\n    // 简洁提示框\n    this.registerTooltip({\n      name: 'simple',\n      enabled: true,\n      trigger: 'item',\n      backgroundColor: 'rgba(255, 255, 255, 0.9)',\n      borderColor: '#ddd',\n      textStyle: {\n        color: '#333',\n        fontSize: 11\n      },\n      position: 'top'\n    });\n\n    // 卡片式提示框\n    this.registerTooltip({\n      name: 'card',\n      enabled: true,\n      trigger: 'item',\n      backgroundColor: '#fff',\n      borderColor: '#e0e0e0',\n      textStyle: {\n        color: '#333',\n        fontSize: 13,\n        fontWeight: 'bold'\n      },\n      position: 'top'\n    });\n\n    // 深色提示框\n    this.registerTooltip({\n      name: 'dark',\n      enabled: true,\n      trigger: 'item',\n      backgroundColor: 'rgba(44, 62, 80, 0.95)',\n      borderColor: '#34495e',\n      textStyle: {\n        color: '#ecf0f1',\n        fontSize: 12\n      },\n      position: 'top'\n    });\n  }\n\n  /**\n   * 注册提示框配置\n   */\n  public registerTooltip(tooltip: TooltipConfig & { name: string }): void {\n    const { name, ...config } = tooltip;\n    this.tooltips.set(name, config);\n  }\n\n  /**\n   * 获取提示框配置\n   */\n  public getTooltip(name: string): TooltipConfig | undefined {\n    return this.tooltips.get(name);\n  }\n\n  /**\n   * 获取所有提示框名称\n   */\n  public getTooltipNames(): string[] {\n    return Array.from(this.tooltips.keys());\n  }\n\n  /**\n   * 应用提示框到 ECharts 配置\n   */\n  public applyTooltip(tooltip: TooltipConfig, baseConfig: any = {}): any {\n    if (!tooltip.enabled) {\n      return {\n        ...baseConfig,\n        tooltip: { show: false }\n      };\n    }\n\n    const config = { ...baseConfig };\n    config.tooltip = {\n      ...config.tooltip,\n      show: true,\n      trigger: tooltip.trigger,\n      backgroundColor: tooltip.backgroundColor,\n      borderColor: tooltip.borderColor,\n      textStyle: tooltip.textStyle,\n      position: tooltip.position,\n      formatter: tooltip.formatter || this.getDefaultFormatter(tooltip.trigger)\n    };\n\n    return config;\n  }\n\n  /**\n   * 获取默认格式化器\n   */\n  private getDefaultFormatter(trigger: string): string | ((params: any) => string) {\n    if (trigger === 'item') {\n      return (params: any) => {\n        if (params.componentType === 'geo') {\n          return `\n            <div style=\"padding: 8px;\">\n              <div style=\"font-weight: bold; margin-bottom: 4px;\">${params.name}</div>\n              <div style=\"color: #666;\">点击查看详情</div>\n            </div>\n          `;\n        }\n        return `\n          <div style=\"padding: 8px;\">\n            <div style=\"font-weight: bold; margin-bottom: 4px;\">${params.name}</div>\n            <div>经度: ${params.value[0]}</div>\n            <div>纬度: ${params.value[1]}</div>\n            ${params.value[2] ? `<div>数值: ${params.value[2]}</div>` : ''}\n          </div>\n        `;\n      };\n    }\n    return '';\n  }\n\n  /**\n   * 创建自定义格式化器\n   */\n  public createCustomFormatter(\n    template: string,\n    dataFields: string[] = ['name', 'value']\n  ): (params: any) => string {\n    return (params: any) => {\n      let result = template;\n      \n      // 替换基本字段\n      result = result.replace(/\\{name\\}/g, params.name || '');\n      result = result.replace(/\\{value\\}/g, params.value ? params.value.join(', ') : '');\n      \n      // 替换数据字段\n      dataFields.forEach(field => {\n        const regex = new RegExp(`\\\\{${field}\\\\}`, 'g');\n        const value = params[field] || (params.data && params.data[field]) || '';\n        result = result.replace(regex, value);\n      });\n\n      // 替换坐标信息\n      if (params.value && Array.isArray(params.value)) {\n        result = result.replace(/\\{lng\\}/g, params.value[0] || '');\n        result = result.replace(/\\{lat\\}/g, params.value[1] || '');\n        result = result.replace(/\\{data\\}/g, params.value[2] || '');\n      }\n\n      return result;\n    };\n  }\n\n  /**\n   * 创建数据统计提示框\n   */\n  public createDataStatsTooltip(data: any[]): TooltipConfig {\n    const stats = this.calculateDataStats(data);\n    \n    return {\n      enabled: true,\n      trigger: 'item',\n      backgroundColor: 'rgba(255, 255, 255, 0.95)',\n      borderColor: '#ddd',\n      textStyle: {\n        color: '#333',\n        fontSize: 12\n      },\n      position: 'top',\n      formatter: (params: any) => {\n        return `\n          <div style=\"padding: 12px; min-width: 200px;\">\n            <div style=\"font-weight: bold; margin-bottom: 8px; color: #2c3e50;\">\n              ${params.name}\n            </div>\n            <div style=\"margin-bottom: 6px;\">\n              <span style=\"color: #7f8c8d;\">坐标:</span> \n              ${params.value[0]}, ${params.value[1]}\n            </div>\n            <div style=\"margin-bottom: 6px;\">\n              <span style=\"color: #7f8c8d;\">数值:</span> \n              <span style=\"font-weight: bold; color: #e74c3c;\">${params.value[2]}</span>\n            </div>\n            <div style=\"border-top: 1px solid #ecf0f1; padding-top: 6px; margin-top: 8px;\">\n              <div style=\"font-size: 11px; color: #95a5a6;\">\n                总计: ${stats.total} | 平均: ${stats.average.toFixed(2)} | 最大: ${stats.max}\n              </div>\n            </div>\n          </div>\n        `;\n      }\n    };\n  }\n\n  /**\n   * 计算数据统计信息\n   */\n  private calculateDataStats(data: any[]): {\n    total: number;\n    average: number;\n    max: number;\n    min: number;\n  } {\n    if (data.length === 0) {\n      return { total: 0, average: 0, max: 0, min: 0 };\n    }\n\n    const values = data.map(item => item.value[2] || 0);\n    const total = values.reduce((sum, val) => sum + val, 0);\n    const average = total / values.length;\n    const max = Math.max(...values);\n    const min = Math.min(...values);\n\n    return { total, average, max, min };\n  }\n\n  /**\n   * 创建区域信息提示框\n   */\n  public createRegionInfoTooltip(regionData: any): TooltipConfig {\n    return {\n      enabled: true,\n      trigger: 'item',\n      backgroundColor: 'rgba(52, 73, 94, 0.95)',\n      borderColor: '#34495e',\n      textStyle: {\n        color: '#ecf0f1',\n        fontSize: 13\n      },\n      position: 'top',\n      formatter: (params: any) => {\n        return `\n          <div style=\"padding: 12px; min-width: 180px;\">\n            <div style=\"font-weight: bold; margin-bottom: 8px; color: #3498db;\">\n              ${params.name}\n            </div>\n            <div style=\"margin-bottom: 4px;\">\n              <span style=\"color: #bdc3c7;\">区域代码:</span> ${regionData.code || 'N/A'}\n            </div>\n            <div style=\"margin-bottom: 4px;\">\n              <span style=\"color: #bdc3c7;\">区域类型:</span> ${regionData.type || 'N/A'}\n            </div>\n            <div style=\"margin-bottom: 4px;\">\n              <span style=\"color: #bdc3c7;\">人口:</span> ${regionData.population || 'N/A'}\n            </div>\n            <div style=\"margin-bottom: 4px;\">\n              <span style=\"color: #bdc3c7;\">面积:</span> ${regionData.area || 'N/A'}\n            </div>\n          </div>\n        `;\n      }\n    };\n  }\n\n  /**\n   * 创建自定义提示框\n   */\n  public createCustomTooltip(\n    name: string,\n    baseTooltip: string = 'default',\n    overrides: Partial<TooltipConfig> = {}\n  ): TooltipConfig {\n    const base = this.getTooltip(baseTooltip) || this.getTooltip('default')!;\n    const customTooltip = {\n      ...base,\n      ...overrides\n    };\n\n    this.registerTooltip({ ...customTooltip, name });\n    return customTooltip;\n  }\n}\n","import type { GeoConfig, GeoData, GeoEventHandlers, ThemeConfig, AnimationConfig, TooltipConfig, LegendConfig } from '@orch-map/types';\nimport { MapRegistry } from './map-registry';\nimport { ThemeManager } from './theme-manager';\nimport { AnimationManager } from './animation-manager';\nimport { TooltipManager } from './tooltip-manager';\n\n/**\n * 基于 ECharts 的 Geo 组件二次封装\n * 提供更简洁的 API 来操作地理坐标系\n */\nexport class Geo {\n  private echartsInstance: any;\n  private container: HTMLElement;\n  private config: GeoConfig;\n  private registeredMaps: Map<string, any> = new Map();\n  private eventHandlers: GeoEventHandlers = {};\n  private themeManager: ThemeManager;\n  private animationManager: AnimationManager;\n  private tooltipManager: TooltipManager;\n\n  constructor(container: HTMLElement, config: GeoConfig) {\n    this.container = container;\n    this.config = config;\n    this.themeManager = ThemeManager.getInstance();\n    this.animationManager = AnimationManager.getInstance();\n    this.tooltipManager = TooltipManager.getInstance();\n    this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    try {\n      // 动态导入 ECharts\n      const echarts = await import('echarts');\n      \n      // 设置容器样式\n      this.setupContainer();\n      \n      // 初始化 ECharts 实例\n      this.echartsInstance = echarts.init(this.container);\n      \n      // 注册地图数据\n      await this.registerMapData();\n      \n      // 设置基础配置\n      this.setupGeoOption();\n      \n      // 绑定事件\n      this.bindEvents();\n      \n    } catch (error) {\n      console.error('Failed to initialize Geo component:', error);\n      throw new Error('ECharts is required but not installed');\n    }\n  }\n\n  private setupContainer(): void {\n    this.container.style.width = '100%';\n    this.container.style.height = '100%';\n    this.container.style.position = 'relative';\n  }\n\n  private async registerMapData(): Promise<void> {\n    if (!this.config.mapData) return;\n\n    const registry = MapRegistry.getInstance();\n    await registry.registerMap(this.config.mapName, this.config.mapData);\n    this.registeredMaps.set(this.config.mapName, this.config.mapData);\n  }\n\n  private setupGeoOption(): void {\n    let option = {\n      geo: {\n        map: this.config.mapName,\n        center: this.config.center,\n        zoom: this.config.zoom,\n        roam: this.config.roam,\n        aspectScale: this.config.aspectScale,\n        layoutCenter: this.config.layoutCenter,\n        layoutSize: this.config.layoutSize,\n        itemStyle: {\n          areaColor: this.config.areaColor,\n          borderColor: this.config.borderColor,\n          borderWidth: this.config.borderWidth,\n          ...this.config.itemStyle\n        },\n        emphasis: {\n          itemStyle: {\n            areaColor: this.config.emphasisAreaColor,\n            ...this.config.emphasisItemStyle\n          }\n        },\n        select: {\n          itemStyle: {\n            areaColor: this.config.selectAreaColor,\n            ...this.config.selectItemStyle\n          }\n        },\n        regions: this.config.regions,\n        ...this.config.geoOptions\n      },\n      series: []\n    };\n\n    // 应用主题\n    if (this.config.theme) {\n      option = this.themeManager.applyTheme(this.config.theme, option);\n    }\n\n    // 应用动画\n    if (this.config.animation) {\n      option = this.animationManager.applyAnimation(this.config.animation, option);\n    }\n\n    // 应用提示框\n    if (this.config.tooltip) {\n      option = this.tooltipManager.applyTooltip(this.config.tooltip, option);\n    }\n\n    // 应用图例\n    if (this.config.legend) {\n      option = this.applyLegend(option);\n    }\n\n    this.echartsInstance.setOption(option);\n  }\n\n  private bindEvents(): void {\n    if (!this.echartsInstance) return;\n\n    // 地图点击事件\n    this.echartsInstance.on('click', (params: any) => {\n      if (params.componentType === 'geo') {\n        this.eventHandlers.onRegionClick?.(params);\n      }\n    });\n\n    // 地图双击事件\n    this.echartsInstance.on('dblclick', (params: any) => {\n      if (params.componentType === 'geo') {\n        this.eventHandlers.onRegionDoubleClick?.(params);\n      }\n    });\n\n    // 地图鼠标悬停事件\n    this.echartsInstance.on('mouseover', (params: any) => {\n      if (params.componentType === 'geo') {\n        this.eventHandlers.onRegionMouseOver?.(params);\n      }\n    });\n\n    // 地图鼠标离开事件\n    this.echartsInstance.on('mouseout', (params: any) => {\n      if (params.componentType === 'geo') {\n        this.eventHandlers.onRegionMouseOut?.(params);\n      }\n    });\n\n    // 地图选择事件\n    this.echartsInstance.on('selectchanged', (params: any) => {\n      if (params.componentType === 'geo') {\n        this.eventHandlers.onRegionSelect?.(params);\n      }\n    });\n  }\n\n\n  /**\n   * 更新地图配置\n   */\n  public updateConfig(newConfig: Partial<GeoConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    this.setupGeoOption();\n  }\n\n  /**\n   * 设置事件处理器\n   */\n  public setEventHandlers(handlers: Partial<GeoEventHandlers>): void {\n    this.eventHandlers = { ...this.eventHandlers, ...handlers };\n  }\n\n  /**\n   * 高亮指定区域\n   */\n  public highlightRegion(regionName: string): void {\n    if (!this.echartsInstance) return;\n\n    this.echartsInstance.dispatchAction({\n      type: 'geoSelect',\n      name: regionName\n    });\n  }\n\n  /**\n   * 取消高亮指定区域\n   */\n  public downplayRegion(regionName: string): void {\n    if (!this.echartsInstance) return;\n\n    this.echartsInstance.dispatchAction({\n      type: 'geoUnSelect',\n      name: regionName\n    });\n  }\n\n  /**\n   * 重置地图视图\n   */\n  public resetView(): void {\n    if (!this.echartsInstance) return;\n\n    this.echartsInstance.dispatchAction({\n      type: 'geoRoam',\n      componentType: 'geo',\n      dx: 0,\n      dy: 0,\n      zoom: this.config.zoom\n    });\n  }\n\n  /**\n   * 获取地图实例\n   */\n  public getEChartsInstance(): any {\n    return this.echartsInstance;\n  }\n\n  /**\n   * 获取当前配置\n   */\n  public getConfig(): GeoConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * 调整容器大小\n   */\n  public resize(): void {\n    if (this.echartsInstance) {\n      this.echartsInstance.resize();\n    }\n  }\n\n  /**\n   * 应用图例配置\n   */\n  private applyLegend(option: any): any {\n    if (!this.config.legend?.enabled) {\n      return option;\n    }\n\n    const legend = this.config.legend;\n    option.legend = {\n      show: true,\n      orient: legend.orient,\n      left: legend.position === 'left' ? 'left' : legend.position === 'right' ? 'right' : 'center',\n      top: legend.position === 'top' ? 'top' : legend.position === 'bottom' ? 'bottom' : 'middle',\n      backgroundColor: legend.backgroundColor,\n      borderColor: legend.borderColor,\n      textStyle: legend.textStyle,\n      data: legend.data\n    };\n\n    return option;\n  }\n\n  /**\n   * 设置主题\n   */\n  public setTheme(themeName: string): boolean {\n    const theme = this.themeManager.getTheme(themeName);\n    if (theme) {\n      this.config.theme = theme;\n      this.setupGeoOption();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * 设置动画\n   */\n  public setAnimation(animationName: string): boolean {\n    const animation = this.animationManager.getAnimation(animationName);\n    if (animation) {\n      this.config.animation = animation;\n      this.setupGeoOption();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * 设置提示框\n   */\n  public setTooltip(tooltipName: string): boolean {\n    const tooltip = this.tooltipManager.getTooltip(tooltipName);\n    if (tooltip) {\n      this.config.tooltip = tooltip;\n      this.setupGeoOption();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * 创建自定义主题\n   */\n  public createCustomTheme(\n    name: string,\n    baseTheme: string = 'default',\n    overrides: Partial<ThemeConfig> = {}\n  ): ThemeConfig {\n    return this.themeManager.createCustomTheme(name, baseTheme, overrides);\n  }\n\n  /**\n   * 创建自定义动画\n   */\n  public createCustomAnimation(\n    name: string,\n    baseAnimation: string = 'fadeIn',\n    overrides: Partial<AnimationConfig> = {}\n  ): AnimationConfig & { name: string } {\n    return this.animationManager.createCustomAnimation(name, baseAnimation, overrides);\n  }\n\n  /**\n   * 创建自定义提示框\n   */\n  public createCustomTooltip(\n    name: string,\n    baseTooltip: string = 'default',\n    overrides: Partial<TooltipConfig> = {}\n  ): TooltipConfig {\n    return this.tooltipManager.createCustomTooltip(name, baseTooltip, overrides);\n  }\n\n  /**\n   * 获取可用主题列表\n   */\n  public getAvailableThemes(): string[] {\n    return this.themeManager.getThemeNames();\n  }\n\n  /**\n   * 获取可用动画列表\n   */\n  public getAvailableAnimations(): string[] {\n    return this.animationManager.getAnimationNames();\n  }\n\n  /**\n   * 获取可用提示框列表\n   */\n  public getAvailableTooltips(): string[] {\n    return this.tooltipManager.getTooltipNames();\n  }\n\n  /**\n   * 添加数据系列（增强版，支持动画）\n   */\n  public addSeries(seriesConfig: any): void {\n    if (!this.echartsInstance) return;\n\n    let data = seriesConfig.data;\n    \n    // 应用动画到数据\n    if (this.config.animation) {\n      data = this.animationManager.createDataLoadingAnimation(data, this.config.animation);\n    }\n\n    const option = {\n      series: [{\n        type: seriesConfig.type || 'scatter',\n        coordinateSystem: 'geo',\n        data: data,\n        symbolSize: seriesConfig.symbolSize || 8,\n        itemStyle: seriesConfig.itemStyle || {\n          color: '#ff6b6b'\n        },\n        label: seriesConfig.label,\n        emphasis: seriesConfig.emphasis,\n        ...seriesConfig.options\n      }]\n    };\n\n    this.echartsInstance.setOption(option);\n  }\n\n  /**\n   * 更新数据（带动画效果）\n   */\n  public updateData(newData: any[]): void {\n    if (!this.echartsInstance) return;\n\n    const option = {\n      series: [{\n        data: this.config.animation \n          ? this.animationManager.createDataUpdateAnimation([], newData, this.config.animation).data\n          : newData\n      }]\n    };\n\n    this.echartsInstance.setOption(option);\n  }\n\n  /**\n   * 切换区域（带动画效果）\n   */\n  public switchRegion(fromRegion: string, toRegion: string): void {\n    if (!this.echartsInstance) return;\n\n    const animationConfig = this.config.animation || {\n      enabled: true,\n      duration: 1000,\n      easing: 'cubicOut'\n    };\n\n    const switchAnimation = this.animationManager.createRegionSwitchAnimation(\n      fromRegion, \n      toRegion, \n      animationConfig\n    );\n\n    this.echartsInstance.dispatchAction({\n      type: 'geoRoam',\n      componentType: 'geo',\n      ...switchAnimation\n    });\n  }\n\n  /**\n   * 销毁 Geo 实例\n   */\n  public destroy(): void {\n    if (this.echartsInstance) {\n      this.echartsInstance.dispose();\n    }\n    this.container.innerHTML = '';\n    this.registeredMaps.clear();\n  }\n}\n","import type { GeoData, GeoConfig } from '@orch-map/types';\n\n/**\n * Geo 组件工具类\n * 提供常用的地图操作和数据处理功能\n */\nexport class GeoUtils {\n  /**\n   * 计算地理边界框\n   */\n  public static calculateBounds(data: GeoData[]): {\n    minLng: number;\n    maxLng: number;\n    minLat: number;\n    maxLat: number;\n  } {\n    if (data.length === 0) {\n      return { minLng: 0, maxLng: 0, minLat: 0, maxLat: 0 };\n    }\n\n    let minLng = data[0].value[0];\n    let maxLng = data[0].value[0];\n    let minLat = data[0].value[1];\n    let maxLat = data[0].value[1];\n\n    data.forEach(item => {\n      const [lng, lat] = item.value;\n      minLng = Math.min(minLng, lng);\n      maxLng = Math.max(maxLng, lng);\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n    });\n\n    return { minLng, maxLng, minLat, maxLat };\n  }\n\n  /**\n   * 计算地理中心点\n   */\n  public static calculateCenter(data: GeoData[]): [number, number] {\n    if (data.length === 0) {\n      return [0, 0];\n    }\n\n    const bounds = this.calculateBounds(data);\n    const centerLng = (bounds.minLng + bounds.maxLng) / 2;\n    const centerLat = (bounds.minLat + bounds.maxLat) / 2;\n\n    return [centerLng, centerLat];\n  }\n\n  /**\n   * 计算合适的缩放级别\n   */\n  public static calculateZoom(data: GeoData[], containerSize: { width: number; height: number }): number {\n    if (data.length === 0) {\n      return 1;\n    }\n\n    const bounds = this.calculateBounds(data);\n    const lngDiff = bounds.maxLng - bounds.minLng;\n    const latDiff = bounds.maxLat - bounds.minLat;\n    \n    const maxDiff = Math.max(lngDiff, latDiff);\n    \n    // 简单的缩放计算，可以根据需要调整\n    if (maxDiff > 50) return 1;\n    if (maxDiff > 20) return 2;\n    if (maxDiff > 10) return 3;\n    if (maxDiff > 5) return 4;\n    if (maxDiff > 2) return 5;\n    if (maxDiff > 1) return 6;\n    if (maxDiff > 0.5) return 7;\n    if (maxDiff > 0.2) return 8;\n    if (maxDiff > 0.1) return 9;\n    return 10;\n  }\n\n  /**\n   * 根据数据自动配置 Geo\n   */\n  public static autoConfigGeo(data: GeoData[], containerSize: { width: number; height: number }): Partial<GeoConfig> {\n    const center = this.calculateCenter(data);\n    const zoom = this.calculateZoom(data, containerSize);\n\n    return {\n      center,\n      zoom\n    };\n  }\n\n  /**\n   * 数据过滤 - 按数值范围\n   */\n  public static filterByValue(data: GeoData[], minValue: number, maxValue: number): GeoData[] {\n    return data.filter(item => {\n      const value = item.value[2];\n      return value >= minValue && value <= maxValue;\n    });\n  }\n\n  /**\n   * 数据过滤 - 按地理范围\n   */\n  public static filterByBounds(\n    data: GeoData[], \n    bounds: { minLng: number; maxLng: number; minLat: number; maxLat: number }\n  ): GeoData[] {\n    return data.filter(item => {\n      const [lng, lat] = item.value;\n      return lng >= bounds.minLng && lng <= bounds.maxLng &&\n             lat >= bounds.minLat && lat <= bounds.maxLat;\n    });\n  }\n\n  /**\n   * 数据排序 - 按数值\n   */\n  public static sortByValue(data: GeoData[], ascending: boolean = true): GeoData[] {\n    return [...data].sort((a, b) => {\n      const valueA = a.value[2];\n      const valueB = b.value[2];\n      return ascending ? valueA - valueB : valueB - valueA;\n    });\n  }\n\n  /**\n   * 数据排序 - 按距离中心点的距离\n   */\n  public static sortByDistance(data: GeoData[], center: [number, number], ascending: boolean = true): GeoData[] {\n    return [...data].sort((a, b) => {\n      const distanceA = this.calculateDistance(a.value, center);\n      const distanceB = this.calculateDistance(b.value, center);\n      return ascending ? distanceA - distanceB : distanceB - distanceA;\n    });\n  }\n\n  /**\n   * 计算两点间距离（简单欧几里得距离）\n   */\n  public static calculateDistance(point1: [number, number, number], point2: [number, number]): number {\n    const dx = point1[0] - point2[0];\n    const dy = point1[1] - point2[1];\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * 数据聚合 - 按区域\n   */\n  public static aggregateByRegion(data: GeoData[], regionKey: string): Record<string, GeoData[]> {\n    const result: Record<string, GeoData[]> = {};\n    \n    data.forEach(item => {\n      const region = (item as any)[regionKey] || 'unknown';\n      if (!result[region]) {\n        result[region] = [];\n      }\n      result[region].push(item);\n    });\n\n    return result;\n  }\n\n  /**\n   * 生成颜色映射\n   */\n  public static generateColorMap(data: GeoData[], colorScheme: string[] = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57']): Map<number, string> {\n    const values = data.map(item => item.value[2]);\n    const minValue = Math.min(...values);\n    const maxValue = Math.max(...values);\n    const valueRange = maxValue - minValue;\n\n    const colorMap = new Map<number, string>();\n    \n    data.forEach(item => {\n      const value = item.value[2];\n      const normalizedValue = (value - minValue) / valueRange;\n      const colorIndex = Math.floor(normalizedValue * (colorScheme.length - 1));\n      const color = colorScheme[colorIndex] || colorScheme[0];\n      colorMap.set(value, color);\n    });\n\n    return colorMap;\n  }\n}\n","import type { GeoData } from '@orch-map/types';\n\n/**\n * 数据可视化增强器\n * 提供热力图、流向图、等值线图等高级可视化功能\n */\nexport class DataVisualization {\n  private static instance: DataVisualization;\n\n  private constructor() {}\n\n  public static getInstance(): DataVisualization {\n    if (!DataVisualization.instance) {\n      DataVisualization.instance = new DataVisualization();\n    }\n    return DataVisualization.instance;\n  }\n\n  /**\n   * 创建热力图配置\n   */\n  public createHeatmapConfig(\n    data: GeoData[],\n    options: {\n      radius?: number;\n      intensity?: number;\n      colorScheme?: string[];\n      blur?: number;\n    } = {}\n  ): any {\n    const {\n      radius = 20,\n      intensity = 0.6,\n      colorScheme = ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffcc', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026'],\n      blur = 0.6\n    } = options;\n\n    return {\n      type: 'heatmap',\n      coordinateSystem: 'geo',\n      data: data.map(item => [item.value[0], item.value[1], item.value[2]]),\n      pointSize: radius,\n      blur,\n      minOpacity: 0,\n      maxOpacity: intensity,\n      itemStyle: {\n        color: {\n          type: 'linear',\n          x: 0,\n          y: 0,\n          x2: 0,\n          y2: 1,\n          colorStops: colorScheme.map((color, index) => ({\n            offset: index / (colorScheme.length - 1),\n            color\n          }))\n        }\n      }\n    };\n  }\n\n  /**\n   * 创建流向图配置\n   */\n  public createFlowConfig(\n    fromData: GeoData[],\n    toData: GeoData[],\n    options: {\n      lineStyle?: any;\n      effectStyle?: any;\n      symbolSize?: number;\n      color?: string;\n    } = {}\n  ): any {\n    const {\n      lineStyle = {\n        color: '#a6c84c',\n        width: 2,\n        curveness: 0.3\n      },\n      effectStyle = {\n        show: true,\n        period: 6,\n        trailLength: 0.7,\n        color: '#fff',\n        symbolSize: 3\n      },\n      symbolSize = 8,\n      color = '#ff6b6b'\n    } = options;\n\n    // 生成流向数据\n    const flowData = fromData.map((from, index) => {\n      const to = toData[index] || toData[0];\n      return {\n        coords: [\n          [from.value[0], from.value[1]],\n          [to.value[0], to.value[1]]\n        ],\n        value: from.value[2] || 1\n      };\n    });\n\n    return {\n      type: 'lines',\n      coordinateSystem: 'geo',\n      data: flowData,\n      lineStyle,\n      effect: effectStyle,\n      symbol: ['none', 'arrow'],\n      symbolSize,\n      itemStyle: {\n        color\n      }\n    };\n  }\n\n  /**\n   * 创建等值线图配置\n   */\n  public createContourConfig(\n    data: GeoData[],\n    options: {\n      levels?: number[];\n      colorScheme?: string[];\n      lineWidth?: number;\n    } = {}\n  ): any {\n    const {\n      levels = [0, 200, 400, 600, 800, 1000],\n      colorScheme = ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffcc'],\n      lineWidth = 2\n    } = options;\n\n    return {\n      type: 'contour',\n      coordinateSystem: 'geo',\n      data: data.map(item => [item.value[0], item.value[1], item.value[2]]),\n      levels,\n      lineStyle: {\n        width: lineWidth\n      },\n      itemStyle: {\n        color: {\n          type: 'linear',\n          x: 0,\n          y: 0,\n          x2: 0,\n          y2: 1,\n          colorStops: colorScheme.map((color, index) => ({\n            offset: index / (colorScheme.length - 1),\n            color\n          }))\n        }\n      }\n    };\n  }\n\n  /**\n   * 创建散点图配置（增强版）\n   */\n  public createScatterConfig(\n    data: GeoData[],\n    options: {\n      symbolSize?: number | ((value: any) => number);\n      color?: string | ((value: any) => string);\n      symbol?: string;\n      label?: any;\n      emphasis?: any;\n    } = {}\n  ): any {\n    const {\n      symbolSize = 8,\n      color = '#ff6b6b',\n      symbol = 'circle',\n      label = {\n        show: false\n      },\n      emphasis = {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\n        }\n      }\n    } = options;\n\n    return {\n      type: 'scatter',\n      coordinateSystem: 'geo',\n      data: data.map(item => ({\n        name: item.name,\n        value: item.value,\n        itemStyle: item.itemStyle\n      })),\n      symbolSize,\n      symbol,\n      itemStyle: {\n        color\n      },\n      label,\n      emphasis\n    };\n  }\n\n  /**\n   * 创建效果散点图配置\n   */\n  public createEffectScatterConfig(\n    data: GeoData[],\n    options: {\n      symbolSize?: number;\n      color?: string;\n      effectType?: 'ripple';\n      rippleEffect?: any;\n    } = {}\n  ): any {\n    const {\n      symbolSize = 8,\n      color = '#ff6b6b',\n      effectType = 'ripple',\n      rippleEffect = {\n        period: 4,\n        scale: 2.5,\n        brushType: 'fill'\n      }\n    } = options;\n\n    return {\n      type: 'effectScatter',\n      coordinateSystem: 'geo',\n      data: data.map(item => ({\n        name: item.name,\n        value: item.value,\n        itemStyle: item.itemStyle\n      })),\n      symbolSize,\n      itemStyle: {\n        color\n      },\n      effectType,\n      rippleEffect\n    };\n  }\n\n  /**\n   * 创建地图配置\n   */\n  public createMapConfig(\n    data: GeoData[],\n    mapName: string,\n    options: {\n      itemStyle?: any;\n      emphasis?: any;\n      select?: any;\n      label?: any;\n    } = {}\n  ): any {\n    const {\n      itemStyle = {\n        areaColor: '#f0f0f0',\n        borderColor: '#999',\n        borderWidth: 1\n      },\n      emphasis = {\n        itemStyle: {\n          areaColor: '#ff6b6b'\n        }\n      },\n      select = {\n        itemStyle: {\n          areaColor: '#4ecdc4'\n        }\n      },\n      label = {\n        show: true,\n        position: 'inside',\n        fontSize: 12,\n        color: '#333'\n      }\n    } = options;\n\n    return {\n      type: 'map',\n      map: mapName,\n      data: data.map(item => ({\n        name: item.name,\n        value: item.value[2] || 0,\n        itemStyle: item.itemStyle\n      })),\n      itemStyle,\n      emphasis,\n      select,\n      label\n    };\n  }\n\n  /**\n   * 创建组合图表配置\n   */\n  public createCombinedConfig(\n    configs: Array<{\n      type: 'scatter' | 'effectScatter' | 'heatmap' | 'lines' | 'map' | 'contour';\n      data: GeoData[];\n      options?: any;\n    }>\n  ): any[] {\n    return configs.map(config => {\n      switch (config.type) {\n        case 'scatter':\n          return this.createScatterConfig(config.data, config.options);\n        case 'effectScatter':\n          return this.createEffectScatterConfig(config.data, config.options);\n        case 'heatmap':\n          return this.createHeatmapConfig(config.data, config.options);\n        case 'lines':\n          return this.createFlowConfig(config.data, config.data, config.options);\n        case 'map':\n          return this.createMapConfig(config.data, 'china', config.options);\n        case 'contour':\n          return this.createContourConfig(config.data, config.options);\n        default:\n          return this.createScatterConfig(config.data, config.options);\n      }\n    });\n  }\n\n  /**\n   * 数据聚类\n   */\n  public clusterData(\n    data: GeoData[],\n    options: {\n      clusterRadius?: number;\n      maxZoom?: number;\n      minPoints?: number;\n    } = {}\n  ): Array<{\n    center: [number, number];\n    points: GeoData[];\n    count: number;\n  }> {\n    const {\n      clusterRadius = 50,\n      maxZoom = 10,\n      minPoints = 2\n    } = options;\n\n    const clusters: Array<{\n      center: [number, number];\n      points: GeoData[];\n      count: number;\n    }> = [];\n\n    data.forEach(point => {\n      let addedToCluster = false;\n\n      for (const cluster of clusters) {\n        const distance = this.calculateDistance(\n          point.value,\n          cluster.center\n        );\n\n        if (distance <= clusterRadius) {\n          cluster.points.push(point);\n          cluster.count++;\n          // 重新计算聚类中心\n          cluster.center = this.calculateCenter(cluster.points);\n          addedToCluster = true;\n          break;\n        }\n      }\n\n      if (!addedToCluster) {\n        clusters.push({\n          center: [point.value[0], point.value[1]],\n          points: [point],\n          count: 1\n        });\n      }\n    });\n\n    return clusters.filter(cluster => cluster.count >= minPoints);\n  }\n\n  /**\n   * 计算两点间距离\n   */\n  private calculateDistance(point1: [number, number, number], point2: [number, number]): number {\n    const dx = point1[0] - point2[0];\n    const dy = point1[1] - point2[1];\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * 计算中心点\n   */\n  private calculateCenter(points: GeoData[]): [number, number] {\n    if (points.length === 0) return [0, 0];\n\n    const sumLng = points.reduce((sum, point) => sum + point.value[0], 0);\n    const sumLat = points.reduce((sum, point) => sum + point.value[1], 0);\n\n    return [sumLng / points.length, sumLat / points.length];\n  }\n\n  /**\n   * 生成颜色渐变\n   */\n  public generateColorGradient(\n    startColor: string,\n    endColor: string,\n    steps: number\n  ): string[] {\n    const colors: string[] = [];\n    \n    for (let i = 0; i < steps; i++) {\n      const ratio = i / (steps - 1);\n      const color = this.interpolateColor(startColor, endColor, ratio);\n      colors.push(color);\n    }\n\n    return colors;\n  }\n\n  /**\n   * 颜色插值\n   */\n  private interpolateColor(color1: string, color2: string, ratio: number): string {\n    const hex1 = color1.replace('#', '');\n    const hex2 = color2.replace('#', '');\n\n    const r1 = parseInt(hex1.substr(0, 2), 16);\n    const g1 = parseInt(hex1.substr(2, 2), 16);\n    const b1 = parseInt(hex1.substr(4, 2), 16);\n\n    const r2 = parseInt(hex2.substr(0, 2), 16);\n    const g2 = parseInt(hex2.substr(2, 2), 16);\n    const b2 = parseInt(hex2.substr(4, 2), 16);\n\n    const r = Math.round(r1 + (r2 - r1) * ratio);\n    const g = Math.round(g1 + (g2 - g1) * ratio);\n    const b = Math.round(b1 + (b2 - b1) * ratio);\n\n    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n  }\n}\n","import type { GeoData } from '@orch-map/types';\n\n/**\n * 交互功能增强器\n * 提供区域搜索、数据筛选、交互控制等功能\n */\nexport class InteractiveFeatures {\n  private static instance: InteractiveFeatures;\n  private searchIndex: Map<string, GeoData[]> = new Map();\n  private filterCache: Map<string, GeoData[]> = new Map();\n\n  private constructor() {}\n\n  public static getInstance(): InteractiveFeatures {\n    if (!InteractiveFeatures.instance) {\n      InteractiveFeatures.instance = new InteractiveFeatures();\n    }\n    return InteractiveFeatures.instance;\n  }\n\n  /**\n   * 构建搜索索引\n   */\n  public buildSearchIndex(data: GeoData[]): void {\n    this.searchIndex.clear();\n    \n    data.forEach(item => {\n      const name = item.name.toLowerCase();\n      \n      // 按完整名称索引\n      this.addToIndex(name, item);\n      \n      // 按拼音首字母索引\n      const pinyin = this.getPinyinInitials(item.name);\n      this.addToIndex(pinyin, item);\n      \n      // 按字符索引\n      for (let i = 0; i < name.length; i++) {\n        this.addToIndex(name.substring(i), item);\n      }\n    });\n  }\n\n  /**\n   * 添加到搜索索引\n   */\n  private addToIndex(key: string, item: GeoData): void {\n    if (!this.searchIndex.has(key)) {\n      this.searchIndex.set(key, []);\n    }\n    this.searchIndex.get(key)!.push(item);\n  }\n\n  /**\n   * 搜索数据\n   */\n  public search(query: string, data: GeoData[]): GeoData[] {\n    if (!query.trim()) return data;\n\n    const searchTerm = query.toLowerCase().trim();\n    const results = new Set<GeoData>();\n\n    // 精确匹配\n    if (this.searchIndex.has(searchTerm)) {\n      this.searchIndex.get(searchTerm)!.forEach(item => results.add(item));\n    }\n\n    // 模糊匹配\n    for (const [key, items] of this.searchIndex) {\n      if (key.includes(searchTerm)) {\n        items.forEach(item => results.add(item));\n      }\n    }\n\n    return Array.from(results);\n  }\n\n  /**\n   * 按数值范围筛选\n   */\n  public filterByValue(\n    data: GeoData[],\n    minValue: number,\n    maxValue: number\n  ): GeoData[] {\n    return data.filter(item => {\n      const value = item.value[2] || 0;\n      return value >= minValue && value <= maxValue;\n    });\n  }\n\n  /**\n   * 按地理范围筛选\n   */\n  public filterByBounds(\n    data: GeoData[],\n    bounds: {\n      minLng: number;\n      maxLng: number;\n      minLat: number;\n      maxLat: number;\n    }\n  ): GeoData[] {\n    return data.filter(item => {\n      const [lng, lat] = item.value;\n      return lng >= bounds.minLng && lng <= bounds.maxLng &&\n             lat >= bounds.minLat && lat <= bounds.maxLat;\n    });\n  }\n\n  /**\n   * 按区域筛选\n   */\n  public filterByRegion(\n    data: GeoData[],\n    regionNames: string[]\n  ): GeoData[] {\n    return data.filter(item => regionNames.includes(item.name));\n  }\n\n  /**\n   * 多条件筛选\n   */\n  public multiFilter(\n    data: GeoData[],\n    filters: {\n      search?: string;\n      valueRange?: [number, number];\n      bounds?: {\n        minLng: number;\n        maxLng: number;\n        minLat: number;\n        maxLat: number;\n      };\n      regions?: string[];\n    }\n  ): GeoData[] {\n    let result = [...data];\n\n    if (filters.search) {\n      result = this.search(filters.search, result);\n    }\n\n    if (filters.valueRange) {\n      result = this.filterByValue(result, filters.valueRange[0], filters.valueRange[1]);\n    }\n\n    if (filters.bounds) {\n      result = this.filterByBounds(result, filters.bounds);\n    }\n\n    if (filters.regions && filters.regions.length > 0) {\n      result = this.filterByRegion(result, filters.regions);\n    }\n\n    return result;\n  }\n\n  /**\n   * 数据排序\n   */\n  public sortData(\n    data: GeoData[],\n    sortBy: 'name' | 'value' | 'distance',\n    order: 'asc' | 'desc' = 'asc',\n    center?: [number, number]\n  ): GeoData[] {\n    return [...data].sort((a, b) => {\n      let comparison = 0;\n\n      switch (sortBy) {\n        case 'name':\n          comparison = a.name.localeCompare(b.name);\n          break;\n        case 'value':\n          comparison = (a.value[2] || 0) - (b.value[2] || 0);\n          break;\n        case 'distance':\n          if (!center) return 0;\n          const distanceA = this.calculateDistance(a.value, center);\n          const distanceB = this.calculateDistance(b.value, center);\n          comparison = distanceA - distanceB;\n          break;\n      }\n\n      return order === 'asc' ? comparison : -comparison;\n    });\n  }\n\n  /**\n   * 计算两点间距离\n   */\n  private calculateDistance(point1: [number, number, number], point2: [number, number]): number {\n    const dx = point1[0] - point2[0];\n    const dy = point1[1] - point2[1];\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * 获取拼音首字母\n   */\n  private getPinyinInitials(text: string): string {\n    // 简化的拼音首字母映射\n    const pinyinMap: Record<string, string> = {\n      '北': 'B', '京': 'J', '上': 'S', '海': 'H', '广': 'G', '州': 'Z',\n      '深': 'S', '圳': 'Z', '杭': 'H', '南': 'N',\n      '武': 'W', '汉': 'H', '成': 'C', '都': 'D', '西': 'X', '安': 'A',\n      '重': 'C', '庆': 'Q', '天': 'T', '津': 'J', '苏': 'S',\n      '青': 'Q', '岛': 'D', '大': 'D', '连': 'L', '宁': 'N', '波': 'B',\n      '厦': 'X', '门': 'M', '福': 'F', '长': 'C', '沙': 'S',\n      '郑': 'Z', '济': 'J', '太': 'T', '原': 'Y',\n      '石': 'S', '家': 'J', '庄': 'Z', '哈': 'H', '尔': 'E', '滨': 'B',\n      '春': 'C', '沈': 'S', '阳': 'Y', '呼': 'H', '和': 'H',\n      '浩': 'H', '特': 'T', '银': 'Y', '川': 'C', '兰': 'L',\n      '乌': 'W', '鲁': 'L', '木': 'M', '齐': 'Q',\n      '拉': 'L', '萨': 'S', '昆': 'K', '明': 'M', '贵': 'G',\n      '口': 'K', '三': 'S', '亚': 'Y'\n    };\n\n    return text.split('').map(char => pinyinMap[char] || char).join('');\n  }\n\n  /**\n   * 创建数据统计\n   */\n  public createDataStats(data: GeoData[]): {\n    total: number;\n    average: number;\n    max: number;\n    min: number;\n    median: number;\n    stdDev: number;\n  } {\n    if (data.length === 0) {\n      return { total: 0, average: 0, max: 0, min: 0, median: 0, stdDev: 0 };\n    }\n\n    const values = data.map(item => item.value[2] || 0).sort((a, b) => a - b);\n    const total = values.reduce((sum, val) => sum + val, 0);\n    const average = total / values.length;\n    const max = Math.max(...values);\n    const min = Math.min(...values);\n    const median = values.length % 2 === 0\n      ? (values[values.length / 2 - 1] + values[values.length / 2]) / 2\n      : values[Math.floor(values.length / 2)];\n\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - average, 2), 0) / values.length;\n    const stdDev = Math.sqrt(variance);\n\n    return { total, average, max, min, median, stdDev };\n  }\n\n  /**\n   * 创建数据分组\n   */\n  public groupData(\n    data: GeoData[],\n    groupBy: 'value' | 'region' | 'custom',\n    groupFunction?: (item: GeoData) => string\n  ): Map<string, GeoData[]> {\n    const groups = new Map<string, GeoData[]>();\n\n    data.forEach(item => {\n      let groupKey: string;\n\n      switch (groupBy) {\n        case 'value':\n          const value = item.value[2] || 0;\n          if (value > 500) groupKey = '高值';\n          else if (value > 200) groupKey = '中值';\n          else groupKey = '低值';\n          break;\n        case 'region':\n          // 简化的区域分组\n          const lng = item.value[0];\n          const lat = item.value[1];\n          if (lng > 110 && lat > 30) groupKey = '华东';\n          else if (lng > 110 && lat <= 30) groupKey = '华南';\n          else if (lng <= 110 && lat > 30) groupKey = '华北';\n          else groupKey = '其他';\n          break;\n        case 'custom':\n          groupKey = groupFunction ? groupFunction(item) : '默认';\n          break;\n        default:\n          groupKey = '默认';\n      }\n\n      if (!groups.has(groupKey)) {\n        groups.set(groupKey, []);\n      }\n      groups.get(groupKey)!.push(item);\n    });\n\n    return groups;\n  }\n\n  /**\n   * 创建数据导出\n   */\n  public exportData(\n    data: GeoData[],\n    format: 'json' | 'csv' | 'geojson' = 'json'\n  ): string {\n    switch (format) {\n      case 'json':\n        return JSON.stringify(data, null, 2);\n      case 'csv':\n        const csvHeader = 'name,lng,lat,value\\n';\n        const csvRows = data.map(item => \n          `${item.name},${item.value[0]},${item.value[1]},${item.value[2] || 0}`\n        ).join('\\n');\n        return csvHeader + csvRows;\n      case 'geojson':\n        const geojson = {\n          type: 'FeatureCollection',\n          features: data.map(item => ({\n            type: 'Feature',\n            properties: {\n              name: item.name,\n              value: item.value[2] || 0\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: [item.value[0], item.value[1]]\n            }\n          }))\n        };\n        return JSON.stringify(geojson, null, 2);\n      default:\n        return JSON.stringify(data, null, 2);\n    }\n  }\n\n  /**\n   * 创建数据导入\n   */\n  public importData(\n    data: string,\n    format: 'json' | 'csv' | 'geojson' = 'json'\n  ): GeoData[] {\n    try {\n      switch (format) {\n        case 'json':\n          return JSON.parse(data);\n        case 'csv':\n          const lines = data.split('\\n');\n          const headers = lines[0].split(',');\n          return lines.slice(1).map(line => {\n            const values = line.split(',');\n            return {\n              name: values[0],\n              value: [\n                parseFloat(values[1]),\n                parseFloat(values[2]),\n                parseFloat(values[3]) || 0\n              ]\n            };\n          });\n        case 'geojson':\n          const geojson = JSON.parse(data);\n          return geojson.features.map((feature: any) => ({\n            name: feature.properties.name,\n            value: [\n              feature.geometry.coordinates[0],\n              feature.geometry.coordinates[1],\n              feature.properties.value || 0\n            ]\n          }));\n        default:\n          return JSON.parse(data);\n      }\n    } catch (error) {\n      console.error('数据导入失败:', error);\n      return [];\n    }\n  }\n\n  /**\n   * 清除缓存\n   */\n  public clearCache(): void {\n    this.searchIndex.clear();\n    this.filterCache.clear();\n  }\n}\n"],"mappings":"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","names":[]}