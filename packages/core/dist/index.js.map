{"version":3,"sources":["../src/index.ts","../src/echarts-geo/index.ts","../src/interfaces/index.ts","../src/utils/geoDataService.ts","../src/MapStateManager.ts","../src/echarts-geo/echart.option.ts","../src/adapters/DeckglMapAdapter.ts","../src/deckgl/deckInstance.ts","../src/utils/curvatureCalculator.ts","../src/deckgl/line2d.ts","../src/deckgl/line3d.ts","../src/deckgl/glMap.const.ts","../src/deckgl/index.ts","../src/deckgl/icon.layer.ts","../src/deckgl/iconAtlas.ts","../src/deckgl/layerManager.ts","../src/factory/MapRendererFactory.ts","../src/adapters/UnifiedMapComponent.ts","../src/adapters/EChartsRenderer.ts","../src/adapters/DeckGLRenderer.ts","../src/utils/helpers.ts","../src/constants/index.ts"],"sourcesContent":["/**\n * 地图渲染器统一接口 - 主入口文件\n * 提供统一的地图渲染 API，支持多种渲染引擎\n */\n\n// 导出接口\nexport type { \n  IMapRenderer, \n  MapRendererConfig, \n  MapRendererEvents \n} from \"./interfaces/IMapRenderer\"\n\n// 导出地图渲染器\nexport { default as EchartsMap } from \"./echarts-geo\"\nexport { DeckglMapAdapter } from \"./adapters/DeckglMapAdapter\"\nexport { UnifiedMapComponent, type UnifiedMapConfig } from \"./adapters/UnifiedMapComponent\"\n\n// 导出旧版渲染器（向后兼容）\nexport { EChartsMapRenderer } from \"./adapters/EChartsRenderer\"\nexport { DeckGLMapRenderer } from \"./adapters/DeckGLRenderer\"\n\n// 导出工厂类\nexport { MapRendererFactory, MapRendererType } from \"./factory/MapRendererFactory\"\n\n\n// 导出便捷函数\nexport { \n  createMapRenderer, \n  createUnifiedMap, \n  createEchartsMap, \n  createDeckglMap \n} from \"./utils/helpers\"\n\n// 导出常量\nexport * from \"./constants\"\n\n","import { MapLevel, type AnyObj, type BaseMapPoint, type BaseMapLine } from \"../../../types/src/map.interface\"\nimport { type CoordinateNumber, type GeoJsonFeature, type HcTransform } from \"../../../types/src/geo.interface\"\nimport { debounce, GeoJsonUtils, isEmptyArray, isUndef } from \"@orch-map/utils\"\nimport { type EChartsCoreOption, type SeriesOption } from \"echarts\"\nimport * as echarts from \"echarts/core\"\nimport { CanvasRenderer } from \"echarts/renderers\"\nimport { GeoComponent, TooltipComponent, TitleComponent } from \"echarts/components\" \nimport type { Feature, FeatureCollection } from \"geojson\"\nimport type { IMapRenderer, MapRendererConfig, MapRendererEvents } from \"../interfaces/IMapRenderer\"\nimport MapStateManager from \"../MapStateManager\" \n\nimport { BOUNDARY_OPTIONS, POST_CODE_KEY } from \"./echart.option\"\nimport { type GEOParam } from \"./types\"\nimport { type LineSeriesDataItem } from \"./types/line.type\"\nimport { PointTypeEnum, type PointParam, type PointSeries, type PointSeriesDataItem } from \"./types/node.type\"\nimport { GeoJSONSourceInput } from \"echarts/types/src/coord/geo/geoTypes.js\"\nimport { getGeoJsonData } from \"../utils/geoDataService\"\n\n// Register necessary components\necharts.use([CanvasRenderer, GeoComponent, TooltipComponent,TitleComponent])\n// 常量与工具\nconst G2 = { CHINA: \"中国\", USA: \"美国\" } as const\nconst CHINA_AD_CODE_JUST_FOR_FE = \"100000\"\nconst US_AD_CODE_JUST_FOR_FE = \"us\"\nconst MUNICIPALITY_CODES = new Set([\"110000\", \"120000\", \"310000\", \"500000\"]) // 京津沪渝\nconst isMunicipality = (adcode: string): boolean => MUNICIPALITY_CODES.has(adcode)\n\nconst JUST_SUPPORTED_NEXT_LEVEL_COUNTRIES_AD_CODE = [CHINA_AD_CODE_JUST_FOR_FE, US_AD_CODE_JUST_FOR_FE]\n\ninterface EchartsMapEvents<T> {\n  onHoverPoint?: (params: PointParam<T>) => void\n  onClickPoint?: (params: PointParam<T>) => void\n  onClickArea?: (params?: GEOParam) => void\n  onDoubleClickArea?: (nextLevel: MapLevel, params: GEOParam) => void\n  onHoverArea?: (params?: GEOParam, pointsInRegion?: string[]) => void\n  onUpdateGeo?: (params: FeatureCollection) => void\n  onZoom?: (zoom: number) => void\n}\n\ninterface EchartsMapOptions<T> {\n  events?: EchartsMapEvents<T>\n}\n\nexport default class EchartsMap<T = unknown> implements IMapRenderer {\n  private detailMap: string = \"\"\n  private centralCountry?: string\n  private events: EchartsMapEvents<T>\n  private container: HTMLElement\n  private chartInstance: echarts.ECharts | null = null\n  private series: SeriesOption[] = []\n  private boundaryLoading = false\n  private config: MapRendererConfig\n  private unsubscribeState: (() => void) | null = null\n\n  public constructor(container: HTMLElement | string, options: EchartsMapOptions<T> | MapRendererConfig) {\n\n    if (typeof container === 'string') {\n      const element = document.getElementById(container)\n      if (!element) {\n        throw new Error(`Container element with id \"${container}\" not found`)\n      }\n      this.container = element\n    } else {\n      this.container = container\n    }\n\n    // Check if options is MapRendererConfig (new interface)\n    if ('container' in options) {\n      this.config = options as MapRendererConfig\n      this.events = this.convertEventsToEchartsFormat(this.config.events)\n    } else {\n      // Legacy constructor\n      this.events = (options as EchartsMapOptions<T>).events || {}\n      this.config = {\n        container: this.container,\n        events: this.events as MapRendererEvents\n      }\n    }\n\n    this.initChart()\n    this.registerEvents()\n  }\n\n\n\n  private get currentMapIsChina() {\n    return MapStateManager.country === CHINA_AD_CODE_JUST_FOR_FE\n  }\n\n  private get detailGeojson() {\n    return (echarts.getMap(this.detailMap)?.geoJson ?? {}) as FeatureCollection\n  }\n\n  private setChartOption(option: unknown) {\n    if (!this.chartInstance) return\n    this.chartInstance.setOption(option as EChartsCoreOption)\n  }\n\n  public setGEOData(boundary: FeatureCollection, detail: FeatureCollection) {\n    if (!detail || !detail.features) {\n      this.boundaryLoading = false\n      return\n    }\n    let center = null\n    let scale = 1\n\n    if (MapStateManager.curLevel === MapLevel.WORLD) {\n      if (this.centralCountry) {\n        const feature = detail.features.find((item: Feature) => item.id === this.centralCountry)\n        const targetCoordinates = (feature?.geometry && 'coordinates' in feature.geometry) ? feature.geometry.coordinates : []\n        const { center: c, zoom: z } = this.getCenterAndZoomByGeometryCoordinates(targetCoordinates)\n        scale = z\n        center = c\n      }\n    } else if (MapStateManager.curLevel !== MapLevel.COUNTRY) {\n      const targetCoordinates = detail.features.map((item: Feature) => \n        ('coordinates' in item.geometry) ? item.geometry.coordinates : []\n      )\n      const { center: c } = this.getCenterAndZoomByGeometryCoordinates(targetCoordinates)\n      center = c\n    }\n\n    const isWorld = MapStateManager.curLevel === MapLevel.WORLD\n    const option: EChartsCoreOption = {\n      geo: {\n        ...BOUNDARY_OPTIONS,\n        map: this.detailMap,\n        center,\n        zoom: scale || (isWorld ? 1.3 : 1),\n        itemStyle: {\n          ...BOUNDARY_OPTIONS.itemStyle,\n          borderWidth: isWorld ? 0 : 1,\n          shadowBlur: isWorld ? 1 : 0,\n        },\n      },\n    }\n    this.setChartOption(option)\n    this.boundaryLoading = false\n  }\n\n  private handleChangeAreaImpl(params?: GEOParam) {\n    if (!params) {\n      this.events.onHoverArea?.()\n      return\n    }\n\n    type SeriesLike = { type?: string; data?: unknown; name?: string }\n    const series = (this.chartInstance?.getOption() as { series?: SeriesLike[] } | undefined)?.series\n    const points = (series?.find(item => item.type === PointTypeEnum.SCATTER)?.data as PointSeriesDataItem<T>[] | undefined)\n    const hoverFeature = this.detailGeojson.features?.find((item: Feature) => item.properties?.name === params.name)\n\n    if (!points || !hoverFeature) {\n      return\n    }\n\n    const pointsInRegion: string[] = []\n\n    points.forEach((point: PointSeriesDataItem<T>) => {\n      const coordinates = point.value as [number, number]\n\n      const isInRegion = this.checkPointInFeature(coordinates, hoverFeature)\n\n      if (isInRegion && point.businessInfo && typeof point.businessInfo === \"object\" && \"siblingPointId\" in point.businessInfo) {\n        pointsInRegion.push(...(point.businessInfo.siblingPointId as string[]))\n      }\n    })\n\n    this.events.onHoverArea?.(params, pointsInRegion)\n  }\n\n  private checkPointInFeature(coordinates: [number, number], feature: Feature): boolean {\n    if (feature.geometry.type === \"Polygon\") {\n      return this.checkPointInPolygon(coordinates, feature.geometry.coordinates as number[][][])\n    }\n\n    if (feature.geometry.type === \"MultiPolygon\") {\n      return (feature.geometry.coordinates as number[][][][]).some((polygon: number[][][]) => this.checkPointInPolygon(coordinates, polygon))\n    }\n\n    return false\n  }\n\n  private checkPointInPolygon(coordinates: [number, number], polygonRings: number[][][]): boolean {\n    return polygonRings.some((ring, index) => {\n      const isInRing = GeoJsonUtils.isPointInPolygon(coordinates, ring)\n      return index === 0 ? isInRing : !isInRing\n    })\n  }\n\n  private mouseoverHandler = (params: PointParam<T> | GEOParam) => {\n    switch (params.componentType) {\n      case \"geo\":\n        this.handleChangeArea(params as GEOParam)\n        break\n      case \"series\":\n        this.events.onHoverPoint?.(params as PointParam<T>)\n        break\n      default:\n        this.events.onHoverArea?.()\n        break\n    }\n  }\n\n  private mouseoutHandler = (params: PointParam<T> | GEOParam) => {\n    switch (params.componentType) {\n      case \"geo\":\n        this.handleChangeArea()\n        break\n      case \"series\":\n        break\n      default:\n        this.handleChangeArea()\n        break\n    }\n  }\n\n  private checkMapEntryEligibility(params: PointParam<T> | GEOParam): MapLevel | undefined {\n    switch (MapStateManager.curLevel) {\n      case MapLevel.WORLD: {\n        return MapLevel.COUNTRY\n      }\n      case MapLevel.COUNTRY: {\n        if (params.name === \"南海诸岛\") {\n          return\n        }\n        return MapLevel.PROVINCE\n      }\n      case MapLevel.PROVINCE:\n        return MapLevel.CITY\n      case MapLevel.CITY:\n        if (!isMunicipality(MapStateManager.adcode)) {\n          return MapLevel.COUNTY\n        }\n        return undefined\n      case MapLevel.COUNTY:\n      default:\n        break\n    }\n  }\n\n  private clickHandler = (params: PointParam<T> | GEOParam) => {\n    params.event.event.stopPropagation()\n    if (params.componentType === \"geo\") {\n      this.events.onClickArea?.(params as GEOParam)\n      return\n    }\n\n    if (\n      params.componentType === \"series\" &&\n      (params.componentSubType === PointTypeEnum.SCATTER || params.componentSubType === PointTypeEnum.EFFECT_SCATTER)\n    ) {\n      this.events.onClickPoint?.(params as PointParam<T>)\n    }\n  }\n\n  private getPostCodeByGeoFeatures(name: string): string {\n    const target = this.detailGeojson.features.find(item => item.properties?.name === name)\n    if (!target) {\n      return \"\"\n    }\n    if (this.currentMapIsChina) {\n      const props = target.properties as { adcode?: string } | undefined\n      return props?.adcode ? String(props.adcode) : \"\"\n    }\n    const props = target.properties as Record<string, unknown>\n    const code = props[POST_CODE_KEY]\n    return typeof code === \"string\" ? code : \"\"\n  }\n\n  private dbClickHandler = (params: PointParam<T> | GEOParam) => {\n    params.event.event.stopPropagation()\n    if (params.componentType === \"geo\") {\n      const nextLevel = this.checkMapEntryEligibility(params)\n      if (isUndef(nextLevel)) {\n        return\n      }\n\n      if (\n        MapStateManager.curLevel === MapLevel.COUNTRY &&\n        nextLevel === MapLevel.PROVINCE &&\n        !JUST_SUPPORTED_NEXT_LEVEL_COUNTRIES_AD_CODE.includes(MapStateManager.adcode)\n      ) {\n        return\n      }\n\n      let nextAdCode\n      if (MapStateManager.curLevel === MapLevel.WORLD) {\n        if (params.name === G2.CHINA) {\n          nextAdCode = CHINA_AD_CODE_JUST_FOR_FE\n        } else if (params.name === G2.USA) {\n          nextAdCode = US_AD_CODE_JUST_FOR_FE\n        } else {\n          nextAdCode = this.getPostCodeByGeoFeatures(params.name)\n        }\n      } else {\n        nextAdCode = this.getPostCodeByGeoFeatures(params.name)\n      }\n      params.region.adcode = nextAdCode\n      this.events.onDoubleClickArea?.(nextLevel as MapLevel, params as GEOParam)\n      MapStateManager.curLevel = nextLevel as MapLevel\n      MapStateManager.adcode = nextAdCode\n      MapStateManager.country = params.region.name ?? \"\"\n      MapStateManager.getGeoJsonData({\n        mapLevel: nextLevel as MapLevel,\n        country: params.region.name ?? \"\",\n        region: nextAdCode,\n      }).then((result) => {\n        MapStateManager.setGeoData(result)\n      })\n    }\n  }\n\n  private waitForBoundaryLoadingToBeFalse(timeout = 5000) {\n    const startTime = Date.now()\n    return new Promise((resolve, reject) => {\n      const checkState = () => {\n        if (!this.boundaryLoading) {\n          resolve(true)\n        } else if (Date.now() - startTime > timeout) {\n          reject(new Error(\"获取地图轮廓加载状态超时\"))\n        } else {\n          setTimeout(checkState, 1000)\n        }\n      }\n      checkState()\n    })\n  }\n\n  private transSeriesCoordinate2GeoJsonXY(series: SeriesOption[]): SeriesOption[] {\n    // @ts-ignore\n    const transform = this.detailGeojson[\"hc-transform\"]\n    return series.map(item => {\n      let data\n      if (item.type === PointTypeEnum.SCATTER || item.type === PointTypeEnum.EFFECT_SCATTER) {\n        data = (item.data as PointSeriesDataItem<AnyObj>[]).map(point => {\n          return {\n            ...point,\n            value: GeoJsonUtils.lngLatToProjected(transform, point.value as CoordinateNumber),\n          }\n        })\n      } else if (item.type === \"lines\") {\n        data = (item.data as LineSeriesDataItem<AnyObj>[]).map(line => {\n          const [startCoords, endCoords] = line.coords\n          return {\n            ...line,\n            coords: [GeoJsonUtils.lngLatToProjected(transform, startCoords), GeoJsonUtils.lngLatToProjected(transform, endCoords)],\n          }\n        })\n      }\n      return {\n        ...item,\n        data: data || item.data,\n      } as SeriesOption\n    })\n  }\n\n  private updateSeriesImpl = async (series: SeriesOption[]) => {\n    await this.waitForBoundaryLoadingToBeFalse()\n    if (this.currentMapIsChina) {\n      const option: EChartsCoreOption = { series }\n      this.setChartOption(option)\n    } else {\n      if (MapStateManager.curLevel === MapLevel.COUNTRY && MapStateManager.adcode === US_AD_CODE_JUST_FOR_FE) {\n        const option: EChartsCoreOption = { series }\n        this.setChartOption(option)\n      } else {\n        const newSeries = this.transSeriesCoordinate2GeoJsonXY(series)\n        const option: EChartsCoreOption = { series: newSeries }\n        this.setChartOption(option)\n      }\n    }\n  }\n\n  public setPointStyleInternal(targetSeriesName: string, processFn: (dataItem: PointSeriesDataItem<T>) => void) {\n    const currentOption = this.chartInstance?.getOption()\n    if (!currentOption || !Array.isArray(currentOption.series)) {\n      return\n    }\n    const series = currentOption.series\n    const pointSeries = series.find((item: SeriesOption) => item.name === targetSeriesName) as PointSeries<T>\n    if (!pointSeries) {\n      return\n    }\n\n    const data = pointSeries.data\n    data.forEach(item => {\n      processFn(item)\n    })\n    const newOption: EChartsCoreOption = { series }\n    this.setChartOption(newOption)\n  }\n\n  private redrawMap = () => {\n    const chartInstance = this.chartInstance\n    if (!chartInstance) {\n      return\n    }\n    const newOption = chartInstance.getOption()\n    const geo = newOption.geo as AnyObj[]\n    if (!geo || isEmptyArray(geo) || isUndef(geo[0])) {\n      return\n    }\n    const geoComponent = geo[0]\n    const mapType = geoComponent.map\n\n    chartInstance.dispatchAction({\n      type: \"changeGeoRoam\",\n      componentType: \"geo\",\n      map: mapType,\n      center: geoComponent.center,\n      zoom: geoComponent.zoom,\n    })\n    this.events.onZoom?.(geoComponent.zoom)\n  }\n\n  private registerEvents() {\n    window.addEventListener(\"resize\", this.resizeMap)\n  }\n\n  public resizeMap = () => {\n    this.chartInstance?.resize()\n  }\n\n  public updateMapLevel(curLevel: MapLevel) {\n    // 通过状态管理器更新状态\n    MapStateManager.curLevel = curLevel\n    \n    const chart = this.chartInstance as unknown as { getOption?: () => AnyObj }\n    const currentOption = chart?.getOption?.()\n    const geo = (currentOption?.geo as AnyObj[]) || []\n    const hasInitializedGeo = Array.isArray(geo) && geo[0] && geo[0].map\n    if (!hasInitializedGeo) {\n      return\n    }\n\n    const isWorld = curLevel === MapLevel.WORLD\n    const option: EChartsCoreOption = {\n      geo: {\n        itemStyle: {\n          ...BOUNDARY_OPTIONS.itemStyle,\n          borderWidth: isWorld ? 0 : 1,\n          shadowBlur: isWorld ? 1 : 0,\n        },\n      },\n    }\n    this.setChartOption(option)\n  }\n\n  public destroy() {\n    try {\n      if (this.detailMap) {\n        this.chartInstance?.clear()\n      }\n    } catch (error) {\n      // 忽略清理错误\n    }\n\n    window.removeEventListener(\"resize\", this.resizeMap)\n    this.chartInstance?.dispose()\n    \n    // 清理状态监听器\n    if (this.unsubscribeState) {\n      this.unsubscribeState()\n      this.unsubscribeState = null\n    }\n  }\n\n  private async initChart() {\n    if (!this.container) {\n      return\n    }\n     await MapStateManager.getGeoJsonData({\n      mapLevel: MapLevel.WORLD,\n      country: this.config.country ?? \"100000\",\n      region: this.config.adcode ?? \"100000\"\n    })\n    const instance = echarts.init(this.container)\n    this.chartInstance = instance\n\n    const baseOption: EChartsCoreOption = {\n      tooltip: {\n        show: false,\n      },\n      geo: {\n        ...BOUNDARY_OPTIONS,\n      },\n      series: this.series,\n    }\n\n    const geojson = MapStateManager.geoData as GeoJSONSourceInput\n    echarts.registerMap(`${this.detailMap}-geo`, geojson)\n    this.setChartOption(baseOption)\n    instance.on(\"click\", this.clickHandler as unknown as ((params: unknown) => void))\n    instance.on(\"dblclick\", this.dbClickHandler as unknown as ((params: unknown) => void))\n    instance.on(\"mouseover\", this.mouseoverHandler as unknown as ((params: unknown) => void))\n    instance.on(\"mouseout\", this.mouseoutHandler as unknown as ((params: unknown) => void))\n    instance.on(\"georoam\", this.redrawMap)\n  }\n\n  // 将原有装饰器方法替换为基于函数的防抖版本\n  public updateSeries = debounce(this.updateSeriesImpl.bind(this), 300)\n  private handleChangeArea = debounce(this.handleChangeAreaImpl.bind(this), 600)\n\n\n  /**\n   * 处理状态变化\n   */\n  private handleStateChange(newState: any, oldState: any) {\n    if (!this.chartInstance) return\n\n    // 处理地图层级变化\n    if (newState.curLevel !== oldState.curLevel) {\n      this.updateMapLevel(newState.curLevel)\n    }\n\n    // 处理地理数据变化\n    if (newState.geoData !== oldState.geoData) {\n      this.setGEOData(newState.geoData, newState.detailGeoData)\n    }\n\n    // 处理点数据变化\n    if (newState.points !== oldState.points) {\n      this.updatePointsInEcharts(newState.points)\n    }\n\n    // 处理线数据变化\n    if (newState.lines !== oldState.lines) {\n      this.updateLinesInEcharts(newState.lines)\n    }\n  }\n\n  /**\n   * 在 ECharts 中更新点数据\n   */\n  private async updatePointsInEcharts(points: BaseMapPoint[]) {\n    if (!this.chartInstance) return\n    \n    const pointSeries = this.convertPointsToSeries(points)\n    await this.updateSeries(pointSeries)\n  }\n\n  /**\n   * 在 ECharts 中更新线数据\n   */\n  private async updateLinesInEcharts(lines: BaseMapLine[]) {\n    if (!this.chartInstance) return\n    \n    const lineSeries = this.convertLinesToSeries(lines)\n    \n    await this.updateSeries([ ...lineSeries])\n  }\n\n  /**\n   * 将统一的事件格式转换为 ECharts 需要的格式\n   */\n  private convertEventsToEchartsFormat(events?: MapRendererEvents): EchartsMapEvents<T> {\n    if (!events) return {}\n\n    return {\n      onClickPoint: events.onPointClick ? (params: PointParam<T>) => {\n        const point = this.findPointByData(params)\n        if (point) events.onPointClick!(point)\n      } : undefined,\n      \n      onHoverPoint: events.onPointHover ? (params: PointParam<T>) => {\n        const point = this.findPointByData(params)\n        events.onPointHover!(point || null)\n      } : undefined,\n      \n      onClickArea: events.onAreaClick ? (params?: GEOParam) => {\n        if (params) {\n          events.onAreaClick!({\n            name: params.name,\n            adcode: params.region?.adcode,\n          })\n        }\n      } : undefined,\n      \n      onHoverArea: events.onAreaHover ? (params?: GEOParam, pointsInRegion?: string[]) => {\n        if (params) {\n          events.onAreaHover!({\n            name: params.name,\n            adcode: params.region?.adcode,\n          })\n        } else {\n          events.onAreaHover!(null)\n        }\n      } : undefined,\n      \n      onDoubleClickArea: events.onAreaDoubleClick ? (nextLevel: MapLevel, params: GEOParam) => {\n        events.onAreaDoubleClick!({\n          name: params.name,\n          adcode: params.region?.adcode,\n          nextLevel,\n        })\n      } : undefined,\n      \n      onZoom: events.onZoom,\n    }\n  }\n\n  /**\n   * 根据 ECharts 事件参数查找对应的点数据\n   */\n  private findPointByData(params: PointParam<T>): BaseMapPoint | undefined {\n    if (!params.data || !params.data.businessInfo) return undefined\n    const businessInfo = params.data.businessInfo as any\n    if (!businessInfo || typeof businessInfo !== 'object' || !('id' in businessInfo)) return undefined\n\n  }\n\n  /**\n   * 规范化地理数据格式\n   */\n  private normalizeGeoData(data: FeatureCollection | FeatureCollection): FeatureCollection {\n    // 如果已经是 GeoJsonData 格式，直接返回\n    if ('type' in data && data.type === 'FeatureCollection') {\n      return data as FeatureCollection\n    }\n    return data as FeatureCollection\n  }\n\n  /**\n   * 将点数据转换为 ECharts Series\n   */\n  private convertPointsToSeries(points: BaseMapPoint[]): SeriesOption[] {\n    const scatterData = points.map(point => ({\n      name: point.name || '',\n      value: [...point.coordinate, point.value || 0],\n      businessInfo: point,\n      itemStyle: point.style ? {\n        color: point.style.color,\n        opacity: point.style.opacity,\n      } : undefined,\n    }))\n\n    return [{\n      name: 'points',\n      type: PointTypeEnum.SCATTER,\n      coordinateSystem: 'geo',\n      data: scatterData,\n      symbolSize: (val: any) => {\n        const point = val[2] || 10\n        return Math.sqrt(point) * 2\n      },\n      label: {\n        show: false,\n      },\n      emphasis: {\n        label: {\n          show: true,\n          position: 'right',\n        },\n      },\n    }]\n  }\n\n  /**\n   * 将线数据转换为 ECharts Series\n   */\n  private convertLinesToSeries(lines: BaseMapLine[]): SeriesOption[] {\n    const lineData = lines.map(line => ({\n      coords: [line.from, line.to],\n      businessInfo: line,\n      lineStyle: line.color ? {\n        color: line.color?.toString(),\n        width: line.width || 2,\n        opacity: line.opacity || 1,\n      } : undefined,\n    }))\n\n    return [{\n      name: 'lines',\n      type: 'lines',\n      coordinateSystem: 'geo',\n      data: lineData,\n      large: true,\n      effect: {\n        show: true,\n        period: 6,\n        trailLength: 0.7,\n        symbolSize: 3,\n      },\n      lineStyle: {\n        width: 2,\n        opacity: 0.6,\n      },\n    }]\n  }\n\n  // IMapRenderer interface implementation\n  async setGeoData(boundary: FeatureCollection): Promise<void> {\n    if (!this.chartInstance) return\n\n    // 如果是 FeatureCollection 类型，需要转换为 GeoJsonData\n    const geoData = this.normalizeGeoData(boundary)\n\n    // 更新状态管理器\n    MapStateManager.setGeoData(geoData)\n  }\n\n  async setPoints(points: BaseMapPoint[]): Promise<void> {\n    if (!this.chartInstance) return\n    \n  }\n\n  async setLines(lines: BaseMapLine[]): Promise<void> {\n    if (!this.chartInstance) return\n    \n  }\n\n  async updateMapView(config: {\n    curLevel: MapLevel\n    adcode: string\n    country: string\n  }) {\n    MapStateManager.curLevel = config.curLevel\n    MapStateManager.adcode = config.adcode\n    MapStateManager.country = config.country\n    // 更新状态管理器中的状态\n    \n\n    // 获取地理数据\n    const geoData = await getGeoJsonData({\n      mapLevel: config.curLevel,\n      country: config.country,\n      region: config.adcode,\n    })\n\n    // 更新地理数据到状态管理器\n    MapStateManager.setGeoData(geoData)\n  }\n\n  // IMapRenderer interface method - adapts to existing setPointStyle\n  setPointStyle(seriesName: string, styleProcessor: (point: BaseMapPoint) => void): void {\n    if (!this.chartInstance) return\n    \n    this.setPointStyleInternal(seriesName, (dataItem: PointSeriesDataItem<T>) => {\n      const point = this.findPointByData({ data: dataItem } as PointParam<T>)\n      if (point) {\n        styleProcessor(point)\n      }\n    })\n  }\n\n  resize(): void {\n    this.resizeMap()\n  }\n\n  getType(): \"echarts\" {\n    return \"echarts\"\n  }\n\n  // 计算中心和缩放（简单估算）\n  private getCenterAndZoomByGeometryCoordinates(coords: unknown): { center: [number, number] | null; zoom: number } {\n    const flat: [number, number][] = []\n    const collect = (c: unknown): void => {\n      if (Array.isArray(c)) {\n        if (typeof c[0] === \"number\" && typeof c[1] === \"number\") {\n          flat.push([c[0] as number, c[1] as number])\n        } else {\n          for (const sub of c) collect(sub)\n        }\n      }\n    }\n    collect(coords)\n    if (flat.length === 0) return { center: null, zoom: 1 }\n    let minLng = flat[0][0], maxLng = flat[0][0], minLat = flat[0][1], maxLat = flat[0][1]\n    for (const [lng, lat] of flat) {\n      minLng = Math.min(minLng, lng)\n      maxLng = Math.max(maxLng, lng)\n      minLat = Math.min(minLat, lat)\n      maxLat = Math.max(maxLat, lat)\n    }\n    const center: [number, number] = [(minLng + maxLng) / 2, (minLat + maxLat) / 2]\n    const lngDiff = Math.max(0.0001, Math.abs(maxLng - minLng))\n    const latDiff = Math.max(0.0001, Math.abs(maxLat - minLat))\n    const zoom = Math.min(Math.log2(360 / lngDiff), Math.log2(180 / latDiff))\n    return { center, zoom: Math.max(0.5, Math.min(zoom, 6)) }\n  }\n}","export * from \"../../../types/src/map.interface\"\nexport * from \"../../../types/src/geo.interface\"\nexport * from \"./IMapRenderer\"\nexport * from \"./layer.interface\"\nexport * from \"./echarts.interface\"\n\nexport enum MapRendererType {\n  ECHARTS = \"echarts\",\n  DECKGL = \"deckgl\"\n}","import { FeatureCollection } from \"geojson\";\nimport { MapLevel } from \"../interfaces\";\n\n// 地图数据路径枚举\nenum MapDataPath {\n  // 世界地图\n  WORLD = \"world/world-highres3.geo\",\n  WORLD_BOUNDARY = \"world/world_edge.geo\",\n  WORLD_WGS84 = \"world/wgs84_world.geo\",\n  WORLD_WGS84_FOR_US = \"world/wgs84_world_for_US.geo\",\n\n  // 中国地图\n  CHINA = \"china/100000_full\",\n  CHINA_BOUNDARY = \"china/000000_edge\",\n\n  // 美国地图\n  US_BOUNDARY = \"us/united-states\",\n}\n\n// 地图数据获取参数\nexport interface GeoDataParams {\n  currentLevel: MapLevel;\n  region: string;\n  country: string;\n  mapType: \"echart\" | \"deckgl\";\n}\n\n// 地图数据缓存\ninterface MapDataCache {\n  [key: string]: FeatureCollection;\n}\n\n/**\n * 内置地图数据服务类\n */\nexport class GeoDataService {\n  private static cache: MapDataCache = {};\n  \n  // 配置 public 目录的基础路径\n  private static getPublicBasePath(): string {\n    // 在开发环境中，可能需要使用相对路径\n    // 在生产环境中，public 目录通常作为静态资源提供\n    if (typeof window !== 'undefined') {\n      // 浏览器环境 - 直接访问根目录下的 public\n      return '/mapData';\n    } else {\n      // Node.js 环境（如 SSR）- 直接访问根目录下的 public\n      return '../../mapData';\n    }\n  }\n\n  /**\n   * 根据键值获取地图数据\n   */\n   private static async getMapData(path: string): Promise<FeatureCollection> {\n    // 检查缓存\n    if (this.cache[path]) {\n      return this.cache[path];\n    }\n    \n    let data: FeatureCollection;\n    try {\n      // 使用 fetch 从 public 目录获取 JSON 数据\n      const basePath = this.getPublicBasePath();\n      const response = await fetch(`${basePath}/${path}.json`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      data = await response.json() as FeatureCollection;\n    } catch (error) {\n      console.error(`Failed to fetch map data from ${path}:`, error);\n      return {\n        type: \"FeatureCollection\",\n        features: []\n      };\n    }\n    \n    this.cache[path] = data;  \n    return data ? data : {\n      type: \"FeatureCollection\",\n      features: []\n    };\n  }\n\n  /**\n   * 获取边界地图数据路径\n   */\n  private static getBoundaryDataPath(params: GeoDataParams): string {\n    const { currentLevel, region, country } = params;\n\n    switch (currentLevel) {\n      case MapLevel.WORLD:\n        return MapDataPath.WORLD_BOUNDARY;\n\n      case MapLevel.COUNTRY:\n        if (region === \"100000\") { // 中国\n          return MapDataPath.CHINA_BOUNDARY;\n        } else if (region === \"us\") { // 美国\n          return MapDataPath.US_BOUNDARY;\n        }\n        return \"\";\n\n      case MapLevel.PROVINCE:\n      case MapLevel.CITY:\n      case MapLevel.COUNTY:\n        if (country === \"100000\") { // 中国\n          return `china/${region}`;\n        } else if (country === \"us\") { // 美国\n          return `us/${region}-all.geo`;\n        }\n        return \"\";\n\n      default:\n        return \"\";\n    }\n  }\n\n  /**\n   * 获取详细地图数据路径\n   */\n  private static getDetailDataPath(params: GeoDataParams): string {\n    const { currentLevel, region, country, mapType } = params;\n\n    switch (currentLevel) {\n      case MapLevel.WORLD:\n        return MapDataPath.WORLD_WGS84_FOR_US;\n        // return MapDataPath.WORLD_WGS84;  \n        // if (mapType === \"deckgl\") {\n        // } else {\n        //   return MapDataPath.WORLD;\n        // }\n\n      case MapLevel.COUNTRY:\n        if (region === \"100000\") { // 中国\n          return MapDataPath.CHINA;\n        } else {\n          return `world/countries/${region}-all.geo`;\n        }\n\n      case MapLevel.PROVINCE:\n        return country === \"100000\" ? `china/${region}_full` : \"\";\n\n      case MapLevel.CITY:\n        return country === \"100000\" ? `china/${region}` : \"\";\n\n      case MapLevel.COUNTY:\n        return country === \"100000\" ? `china/${region}` : \"\";\n\n      default:\n        return \"\";\n    }\n  }\n\n  /**\n   * 处理中国地图特殊数据（移除9段线等）\n   */\n  private static processChinaMapData(data: FeatureCollection): FeatureCollection {\n    // 移除空名称的特征和处理海南省数据\n    data.features = data.features.filter(feature => {\n      if (!feature.properties?.name) {\n        return false;\n      }\n\n      // 处理海南省，只保留海南岛\n      if (feature.properties.name === \"海南省\") {\n        if (feature.geometry && feature.geometry.type === \"MultiPolygon\" && feature.geometry.coordinates && Array.isArray(feature.geometry.coordinates)) {\n          // 只保留第一个坐标组（海南岛），移除其他小岛\n          feature.geometry.coordinates = feature.geometry.coordinates.slice(0, 1);\n        }\n      }\n\n      return true;\n    });\n\n    return data;\n  }\n\n  /**\n   * 获取边界地图数据\n   */\n  //  private static async fetchBoundaryGeoJson(params: GeoDataParams): Promise<GeoJsonData> {\n  //   const path = this.getBoundaryDataPath(params);\n  //   if (!path) {\n  //     throw new Error(\"Boundary data path not found\");\n  //   }\n\n  //   return this.getMapData(path);\n  // }\n\n  /**\n   * 获取详细地图数据\n   */\n   private static async fetchDetailGeoJson(params: GeoDataParams): Promise<FeatureCollection> {\n    const path = this.getDetailDataPath(params);\n    if (!path) {\n      throw new Error(\"Detail data path not found\");\n    }\n\n    let data = await this.getMapData(path);\n\n    // 对中国地图数据进行特殊处理\n    if (params.currentLevel === MapLevel.COUNTRY && params.region === \"100000\") {\n      data = this.processChinaMapData(data);\n    }\n\n    return data;\n  }\n\n\n\n  /**\n   * 清除缓存\n   */\n   private static clearCache(): void {\n    this.cache = {};\n  }\n\n  /**\n   * 预加载常用地图数据\n   */\n   private static async preloadCommonMaps(): Promise<void> {\n    const commonMaps = [\n      { currentLevel: MapLevel.WORLD, region: \"world\", country: \"\", mapType: \"echart\" as const },\n      { currentLevel: MapLevel.COUNTRY, region: \"100000\", country: \"100000\", mapType: \"echart\" as const }\n    ];\n\n    await Promise.all(\n      commonMaps.map(params => this.fetchGeoJson(params))\n    );\n  }\n\n\n    /**\n   * 同时获取边界和详细地图数据\n   */\n  public static async fetchGeoJson(params: GeoDataParams): Promise<FeatureCollection> {\n     return await this.fetchDetailGeoJson(params);\n    }\n}\n\n\n\n\n/**\n * 获取地图数据的参数\n */\nexport interface GetGeoJsonParams {\n  mapLevel: MapLevel;\n  country: string;\n  region: string;\n  mapType?: \"echart\" | \"deckgl\";\n}\n\n\n/**\n * 获取地图 GeoJSON 数据\n * 通过统一的接口获取边界和详细地图数据\n * \n * @param params 地图数据参数\n * @returns 包含边界和详细地图数据的对象\n */\nexport async function getGeoJsonData(params: GetGeoJsonParams): Promise<FeatureCollection> {\n  return await GeoDataService.fetchGeoJson({\n    currentLevel: params.mapLevel,\n    country: params.country,\n    region: params.region,\n    mapType: params.mapType ?? \"echart\",\n  });\n}\n","import { BaseMapPoint, BaseMapLine, MapLevel } from \"./interfaces\"\nimport type { FeatureCollection } from \"@orch-map/types\"\nimport { getGeoJsonData } from \"./utils/geoDataService\"\n\n/**\n * 特定属性变化监听器\n */\nexport type PropertyChangeListener<T = any> = (newValue: T, oldValue: T) => void\n\n/**\n * 地图状态管理器\n * 单例模式，用于统一管理所有地图相关的状态，支持直接通过静态属性访问\n */\nexport default class MapStateManager {\n  // 静态属性，可直接访问\n  private static _curLevel: MapLevel = MapLevel.WORLD\n  private static _country: string = \"100000\" // 默认中国\n  private static _adcode: string = \"100000\"\n  private static _geoData?: FeatureCollection\n  private static _detailGeoData?: FeatureCollection\n\n  // 属性监听器\n  private static propertyListeners: Map<string, PropertyChangeListener[]> = new Map()\n\n  // 私有构造函数，防止外部实例化\n  private constructor() {}\n\n  // 静态 getter/setter - curLevel\n  public static get curLevel(): MapLevel {\n    return MapStateManager._curLevel\n  }\n\n  public static set curLevel(level: MapLevel) {\n    const oldValue = MapStateManager._curLevel\n    MapStateManager._curLevel = level\n    MapStateManager.notifyPropertyChange('curLevel', level, oldValue)\n  }\n\n  // 静态 getter/setter - country\n  public static get country(): string {\n    return MapStateManager._country\n  }\n\n  public static set country(country: string) {\n    const oldValue = MapStateManager._country\n    MapStateManager._country = country\n    MapStateManager.notifyPropertyChange('country', country, oldValue)\n  }\n\n  // 静态 getter/setter - adcode\n  public static get adcode(): string {\n    return MapStateManager._adcode\n  }\n\n  public static set adcode(adcode: string) {\n    const oldValue = MapStateManager._adcode\n    MapStateManager._adcode = adcode\n    MapStateManager.notifyPropertyChange('adcode', adcode, oldValue)\n  }\n\n  // 静态 getter/setter - geoData\n  public static get geoData(): FeatureCollection | undefined {\n    return MapStateManager._geoData\n  }\n\n  public static set geoData(data: FeatureCollection | undefined) {\n    const oldValue = MapStateManager._geoData\n    MapStateManager._geoData = data\n    MapStateManager.notifyPropertyChange('geoData', data, oldValue)\n  }\n\n\n  /**\n   * 设置地理数据（包括详情数据）\n   */\n  public static setGeoData(geoData: FeatureCollection): void {\n    MapStateManager.geoData = geoData\n  }\n\n  public static async getGeoJsonData(config: {\n    mapLevel: MapLevel\n    country: string\n    region: string\n  }): Promise<FeatureCollection> {\n    const result = await getGeoJsonData(config)\n    MapStateManager.setGeoData(result)\n    return result\n  }\n\n  /**\n   * 重置到默认状态\n   */\n  public static reset(): void {\n    MapStateManager._curLevel = MapLevel.WORLD\n    MapStateManager._country = \"100000\"\n    MapStateManager._adcode = \"100000\"\n    MapStateManager._geoData = undefined\n    MapStateManager._detailGeoData = undefined\n  }\n\n  /**\n   * 监听特定属性变化\n   */\n  public static onPropertyChange<T>(\n    property: string,\n    listener: PropertyChangeListener<T>\n  ): () => void {\n    const key = `property-${property}`\n    if (!MapStateManager.propertyListeners.has(key)) {\n      MapStateManager.propertyListeners.set(key, [])\n    }\n    MapStateManager.propertyListeners.get(key)!.push(listener as PropertyChangeListener)\n\n    // 返回取消监听的函数\n    return () => {\n      const listeners = MapStateManager.propertyListeners.get(key)\n      if (listeners) {\n        const index = listeners.indexOf(listener as PropertyChangeListener)\n        if (index > -1) {\n          listeners.splice(index, 1)\n        }\n        if (listeners.length === 0) {\n          MapStateManager.propertyListeners.delete(key)\n        }\n      }\n    }\n  }\n\n  /**\n   * 通知属性变化\n   */\n  private static notifyPropertyChange<T>(\n    property: string, \n    newValue: T, \n    oldValue: T\n  ): void {\n    const key = `property-${property}`\n    const listeners = MapStateManager.propertyListeners.get(key)\n    if (listeners) {\n      listeners.forEach(listener => {\n        try {\n          listener(newValue, oldValue)\n        } catch (error) {\n          console.error(`Error in property change listener for ${property}:`, error)\n        }\n      })\n    }\n  }\n\n  /**\n   * 销毁状态管理器\n   */\n  public static destroy(): void {\n    MapStateManager.propertyListeners.clear()\n    MapStateManager.reset()\n  }\n}\n","/**\n * @description: 在世界地图中，每个国家的唯一标识\n * 该值需要从 geo.json 文件中的 properties 中的 hc-key 字段中获取\n */\nexport const POST_CODE_KEY = \"hc-key\"\n\n// 缺少地图数据GeoJson的国家码\nexport const MISS_MAP_POST_CODE_KEYS = [\"um\", \"fm\", \"sw\", \"sh\", \"ki\", \"bu\", \"mv\", \"sp\", \"to\", \"tv\", \"mh\", \"va\", \"cnm\", \"jk\"]\n\nexport const BASE_LINE_SERIES = {\n  name: \"line\",\n  type: \"lines\",\n  z: 0,\n  zlevel: 1,\n  // 转场动画，所有带有尾迹特效的图表建议关闭该层的动画。\n  // 不然位于同个层的其它系列的图形，和动画的标签也会产生不必要的残影。\n  animation: false,\n  effect: {\n    show: true,\n    // 特效运行速度，值越小速度越快\n    period: 4,\n    // 特效尾迹长度[0, 1]值越大，尾迹越长\n    trailLength: 0.02,\n    symbol: \"arrow\",\n    symbolSize: 2,\n  },\n  geoIndex: 0,\n  // 数据结构 https://www.echartsjs.com/zh/option.html#series-lines.data.coords\n  data: [],\n  progressiveThreshold: 500,\n  progressive: 200,\n}\n\nexport const BOUNDARY_OPTIONS = {\n  zoom: 1.3,\n  hoverLayerThreshold: 1, // 修复：允许hover事件触发\n  silent: false,\n  roam: true,\n  center: null,\n  scaleLimit: { min: 1 },\n  zlevel: 0,\n  itemStyle: {\n    areaColor: \"#094777\",\n    borderWidth: 0,\n    borderColor: \"#1480C5\",\n    shadowBlur: 1,\n    shadowColor: \"rgba(0, 0, 0, 0.5)\",\n  },\n  emphasis: {\n    label: {\n      show: false,\n    },\n    itemStyle: {\n      areaColor: \"#3079c8\",\n      borderWidth: 0,\n    },\n  },\n  // regions: [\n  //   {\n  //     name: \"南海诸岛\",\n  //     itemStyle: {\n  //       opacity: 0,\n  //     },\n  //   },\n  // ],\n}\n\nexport const BASE_POINT_SERIES = {\n  name: \"scatter\",\n  type: \"scatter\",\n  coordinateSystem: \"geo\",\n  z: 1,\n  zlevel: 1,\n  geoIndex: 0,\n  data: [],\n  rippleEffect: { brushType: \"stroke\" },\n  emphasis: {\n    label: {\n      show: true,\n    },\n  },\n}\n","import type { IMapRenderer, MapRendererConfig, MapRendererEvents } from \"../interfaces\"\nimport type{ BaseMapPoint, BaseMapLine } from \"../interfaces\"\nimport { MapLevel } from \"@orch-map/types\"\nimport type { FeatureCollection } from \"@orch-map/types\"\nimport GlMap from \"../deckgl\"\nimport MapStateManager from  \"../MapStateManager\"\n\n/**\n * DeckGL 地图渲染器适配器\n * 将 GlMap 类适配为统一的 IMapRenderer 接口\n */\nexport class DeckglMapAdapter implements IMapRenderer {\n  private glMap: GlMap | null = null\n  private config: MapRendererConfig\n  private instanceId: string\n  private isInitialized = false\n  private initPromise: Promise<void> | null = null\n  private unsubscribeState: (() => void) | null = null\n\n  constructor(config: MapRendererConfig) {\n    this.config = config\n    this.instanceId = `deckgl-${Date.now()}-${Math.random()}`\n    this.initPromise = this.initDeckGL()\n  }\n\n  /**\n   * 初始化 DeckGL\n   */\n  private async initDeckGL(): Promise<void> {\n    const canvas = this.createCanvas()\n    \n    return new Promise<void>((resolve ) => {\n      this.glMap = new GlMap(\n        this.instanceId,\n        canvas,\n        this.config.mode || \"2d\",\n        async () => {\n          this.isInitialized = true\n          const geoJsonData = await MapStateManager.getGeoJsonData({\n            mapLevel: MapLevel.WORLD,\n            country: this.config.country ?? \"100000\",\n            region: this.config.adcode ?? \"100000\"\n          })\n          this.glMap?.setGEOData(geoJsonData)\n          this.setupEventHandlers()\n          resolve()\n        }\n      )\n    })\n  }\n\n  /**\n   * 创建 Canvas 元素\n   */\n  private createCanvas(): HTMLCanvasElement {\n    const container = this.config.container as HTMLElement\n    \n    // 清空容器\n    container.innerHTML = ''\n    \n    // 创建 canvas\n    const canvas = document.createElement('canvas')\n    canvas.style.width = '100%'\n    canvas.style.height = '100%'\n    container.appendChild(canvas)\n    \n    return canvas\n  }\n\n  /**\n   * 设置事件处理器\n   */\n  private setupEventHandlers(): void {\n    // DeckGL 的事件处理在内部已经实现\n    // 这里可以添加额外的事件桥接逻辑\n    if (this.config.events) {\n      // 可以通过扩展 GlMap 类来支持更多事件\n      // 或者通过监听 DOM 事件来实现\n    }\n  }\n\n  /**\n   * 处理状态变化\n   */\n  private handleStateChange(newState: any, oldState: any) {\n    if (!this.glMap || !this.isInitialized) return\n\n    // 处理地理数据变化\n    if (newState.geoData !== oldState.geoData) {\n      this.updateGeoDataInDeckGL(newState.geoData)\n    }\n\n    // 处理点数据变化\n    if (newState.points !== oldState.points) {\n      this.updatePointsInDeckGL(newState.points)\n    }\n\n    // 处理线数据变化\n    if (newState.lines !== oldState.lines) {\n      this.updateLinesInDeckGL(newState.lines)\n    }\n  }\n\n  /**\n   * 在 DeckGL 中更新地理数据\n   */\n  private async updateGeoDataInDeckGL(geoData: FeatureCollection) {\n    if (!this.glMap) return\n    \n    const normalizedData = this.normalizeToFeatureCollection(geoData)\n    this.glMap.setGEOData(normalizedData)\n  }\n\n  /**\n   * 在 DeckGL 中更新点数据\n   */\n  private async updatePointsInDeckGL(points: BaseMapPoint[]) {\n    if (!this.glMap) return\n    \n    const deckglPoints = this.convertPointsForDeckGL(points)\n    await this.glMap.setPoints(deckglPoints)\n  }\n\n  /**\n   * 在 DeckGL 中更新线数据\n   */\n  private async updateLinesInDeckGL(lines: BaseMapLine[]) {\n    if (!this.glMap) return\n    \n    const deckglLines = this.convertLinesForDeckGL(lines)\n    this.glMap.setLines(deckglLines)\n  }\n\n  /**\n   * 等待初始化完成\n   */\n  private async waitForInit(): Promise<void> {\n    if (this.initPromise) {\n      await this.initPromise\n    }\n  }\n\n  /**\n   * 设置地理数据\n   */\n  async setGeoData(boundary: FeatureCollection): Promise<void> {\n    await this.waitForInit()\n    if (!this.glMap) return\n\n    // 更新状态管理器\n    MapStateManager.setGeoData(boundary)\n  }\n\n  /**\n   * 规范化为 FeatureCollection 格式\n   */\n  private normalizeToFeatureCollection(data: FeatureCollection): FeatureCollection {\n    // 检查是否已经是 FeatureCollection\n    if ('type' in data && data.type === 'FeatureCollection') {\n      return data as FeatureCollection\n    }\n    \n    // 如果是 GeoJsonData，尝试转换\n    const geoJsonData = data as FeatureCollection\n    return {\n      type: 'FeatureCollection',\n      features: (geoJsonData.features || []) as any\n    }\n  }\n\n  /**\n   * 设置点数据\n   */\n  async setPoints(points: BaseMapPoint[]): Promise<void> {\n    await this.waitForInit()\n    if (!this.glMap) return\n    \n  }\n\n  /**\n   * 转换点数据为 DeckGL 格式\n   */\n  private convertPointsForDeckGL(points: BaseMapPoint[]): BaseMapPoint[] {\n    return points.map(point => ({\n      ...point,\n      // 确保坐标格式正确\n      coordinate: Array.isArray(point.coordinate) \n        ? point.coordinate as [number, number]\n        : [point.coordinate[0], point.coordinate[1]],\n      // 添加 DeckGL 特定的属性\n      icon: point.icon || 'star',\n      color: this.parseColor(point.style?.color),\n    }))\n  }\n\n  /**\n   * 解析颜色值\n   */\n  private parseColor(color?: string): [number, number, number, number] {\n    if (!color) return [255, 255, 255, 255]\n    \n    // 如果是十六进制颜色\n    if (color.startsWith('#')) {\n      const hex = color.slice(1)\n      const r = parseInt(hex.slice(0, 2), 16)\n      const g = parseInt(hex.slice(2, 4), 16)\n      const b = parseInt(hex.slice(4, 6), 16)\n      const a = hex.length === 8 ? parseInt(hex.slice(6, 8), 16) : 255\n      return [r, g, b, a]\n    }\n    \n    // 如果是 rgb/rgba 格式\n    if (color.startsWith('rgb')) {\n      const matches = color.match(/\\d+/g)\n      if (matches) {\n        const [r, g, b, a = 255] = matches.map(Number)\n        return [r, g, b, a]\n      }\n    }\n    \n    return [255, 255, 255, 255]\n  }\n\n  /**\n   * 设置线数据\n   */\n  async setLines(lines: BaseMapLine[]): Promise<void> {\n    await this.waitForInit()\n    if (!this.glMap) return\n \n  }\n\n  /**\n   * 转换线数据为 DeckGL 格式\n   */\n  private convertLinesForDeckGL(lines: BaseMapLine[]): BaseMapLine[] {\n    return lines.map(line => ({\n      ...line,\n      // 确保坐标格式正确\n      from: Array.isArray(line.from) \n        ? line.from as [number, number]\n        : [line.from[0], line.from[1]],\n      to: Array.isArray(line.to)\n        ? line.to as [number, number] \n        : [line.to[0], line.to[1]],\n      // 添加 DeckGL 特定的属性\n      color: this.parseColor(line.color?.toString()),\n      width: line.width || 2,\n    }))\n  }\n\n  /**\n   * 更新地图层级\n   */\n  updateMapLevel(level: MapLevel): void {\n    // DeckGL 不需要显式的层级管理，通过 zoom 控制\n    // 可以根据 level 调整视图状态\n    console.log('Update map level to:', level)\n  }\n\n  /**\n   * 设置点样式\n   */\n  setPointStyle(seriesName: string, styleProcessor: (point: BaseMapPoint) => void): void {\n    // DeckGL 通过重新设置数据来更新样式\n    // const points = MapStateManager.getProperty('points')\n    // const updatedPoints = points.map(point => {\n    //   const updatedPoint = { ...point }\n    //   styleProcessor(updatedPoint)\n    //   return updatedPoint\n    // })\n    \n    // mapStateManager.setPoints(updatedPoints)\n  }\n\n  /**\n   * 注册额外的图标\n   */\n  async registerExtraIcons(icons: Record<string, string>): Promise<void> {\n    await this.waitForInit()\n    if (!this.glMap) return\n    \n    await this.glMap.registerExtraSvgIcons(icons)\n  }\n\n  /**\n   * 调整地图大小\n   */\n  resize(): void {\n    // DeckGL 会自动处理 resize\n    // 如果需要手动触发，可以调用 deck 实例的 resize 方法\n  }\n\n  /**\n   * 销毁渲染器\n   */\n  destroy(): void {\n    if (!this.glMap) return\n    \n    this.glMap.destroy()\n    this.glMap = null\n    \n    // 清理状态监听器\n    if (this.unsubscribeState) {\n      this.unsubscribeState()\n      this.unsubscribeState = null\n    }\n    \n    // 清理容器\n    const container = this.config.container as HTMLElement\n    container.innerHTML = ''\n  }\n\n  /**\n   * 获取渲染器类型\n   */\n  getType(): \"deckgl\" {\n    return \"deckgl\"\n  }\n}","/**\n * 模块：Deck 实例管理\n * 说明：基于 id 管理多个 DeckGL 实例，提供获取/创建/移除能力，避免外部直接依赖 Deck 构造细节。\n */\n\nimport { AnimatedArcLayer } from '@deck.gl/layers';\nimport { Deck, MapView, MapViewState, ViewStateChangeParameters } from '@deck.gl/core'; \n\nexport class DeckInstance {\n  /** 内部实例表，以 instanceId 为键 */\n    private static _instanceMap: Map<string, Deck<any>> = new Map()\n\n  /** 默认视图状态 */\n  private static _defaultViewState: MapViewState = {\n    longitude: 0,\n    latitude: 30,\n    zoom: 1,\n    pitch: 0,\n  }\n\n  /**\n   * 创建并注册一个 Deck 实例\n   * 注意：如传入已存在的 instanceId 会抛出异常，外层应保证唯一性。\n   * 现在会自动等待 DeckGL 静态文件加载完成\n   */\n  public static async setInstance(\n    instanceId: string,\n    container: HTMLCanvasElement,\n    initialViewState: Partial<MapViewState>,\n    props?: Partial<Record<string, unknown>> & {\n      mode?: \"2d\" | \"3d\"\n      onClick?: (info: unknown, event: unknown) => void\n    },\n  ) {\n    \n    if (DeckInstance._instanceMap.has(instanceId)) {\n      throw new Error(`Instance with id ${instanceId} already exists`)\n    }\n\n\n    const mode = props?.mode || \"2d\"\n    const mapView = new MapView({\n      repeat: true,\n      controller: {\n        scrollZoom: true,\n        dragPan: true,\n        dragRotate: true,\n        doubleClickZoom: true,\n        touchZoom: true,\n        touchRotate: true,\n        keyboard: true,\n      },\n    })\n    const deckInstance = new Deck({\n      canvas: container,\n      initialViewState: {\n        ...this._defaultViewState,\n        ...(mode === \"3d\" ? { pitch: 45 } : {}),\n        ...initialViewState,\n      },\n      views: mapView,\n      ...props,\n      onViewStateChange: <ViewStateT extends MapViewState>(\n        params: ViewStateChangeParameters<ViewStateT>,\n      ): ViewStateT | void => {\n        const { viewState } = params as { viewState: MapViewState }\n        // 限制纬度范围，防止上下拖动超出边界\n        const constrainedLatitude = Math.max(-30, Math.min(30, viewState.latitude as number))\n        const nextViewState = { ...viewState, latitude: constrainedLatitude } as unknown as ViewStateT\n        return nextViewState\n      },\n      layers: [],\n    })\n    DeckInstance._instanceMap.set(instanceId, deckInstance)\n  }\n\n\n  /**\n   * 获取 Deck 实例（不存在会抛错）\n   */\n  public static getInstance(instanceId: string): Deck<any> {\n    const instance = DeckInstance._instanceMap.get(instanceId)\n    if (!instance) {\n      throw new Error(`Instance with id ${instanceId} does not exist`)\n    }\n    return instance\n  }\n\n  /**\n   * 移除 Deck 实例（注意：当前仅删除引用，未调用 Deck 的 finalize；可按需扩展释放 GPU 资源）\n   */\n  public static removeInstance(instanceId: string) {\n    if (!DeckInstance._instanceMap.has(instanceId)) {\n      throw new Error(`Instance with id ${instanceId} does not exist`)\n    } else {\n      DeckInstance._instanceMap.delete(instanceId)\n    }\n  }\n}\n","/**\n * @description: 曲率计算工具类\n * 用于计算地图连线的曲率值，提供确定性的曲率计算方法\n */\nexport class CurvatureCalculator {\n  // 线条随机曲率映射表\n  private curvatureMap: { [key: string]: number } = {}\n\n  /**\n   * @description: 字符串哈希函数，生成0到1之间的数值\n   * 用确定性的方法替代 Math.random()\n   * @param str 输入字符串\n   * @returns 0到1之间的数值\n   */\n  private hashString(str: string): number {\n    let hash = 0\n    for (let i = 0; i < str.length; i++) {\n      hash = (hash << 5) - hash + str.charCodeAt(i)\n      hash |= 0 // 转换为32位整数\n    }\n    // 转换为0到1之间的值\n    return Math.abs(hash) / 2147483647\n  }\n\n  /**\n   * @description: 计算线条曲率\n   * 主要是根据连线的 id 计算两点之后连线的曲率\n   * @param key 线条的唯一标识\n   * @param min 最小曲率值\n   * @param max 最大曲率值\n   * @returns 计算出的曲率值\n   */\n  public curvature(key: string, min = 0, max = 1): number {\n    if (this.curvatureMap[key] === undefined) {\n      // 使用确定性哈希替代 Math.random()\n      this.curvatureMap[key] = this.hashString(key) * (max - min) + min\n    }\n    return this.curvatureMap[key]\n  }\n\n  /**\n   * @description: 计算连线的曲率范围\n   * 根据连线两端点的经纬度差值计算合适的曲率范围\n   */\n  public calculateCurvatureRange(\n    startLng: number,\n    startLat: number,\n    endLng: number,\n    endLat: number,\n  ): { min: number; max: number } {\n    // 避免除以0的情况\n    if (startLat === endLat && startLng === endLng) {\n      return { min: 0.1, max: 0.3 }\n    }\n    // 计算经纬度变化率\n    const deltaLng = Math.abs(endLng - startLng)\n    const deltaLat = Math.abs(endLat - startLat)\n    // 使用变化率比例来确定曲率\n    const ratio = Math.min(deltaLng / deltaLat, deltaLat / deltaLng)\n    const min = ratio > 0.5 ? 0.5 : 0.2\n    const max = ratio > 0.5 ? 1.0 : 0.5\n    return { min, max }\n  }\n\n  /**\n   * @description: 根据起终点坐标计算曲率值\n   * 综合使用曲率范围计算和曲率计算方法\n   */\n  public calculateCurvatureByCoordinates(\n    key: string,\n    startCoordinate: [number, number],\n    endCoordinate: [number, number],\n    customRange?: { min: number; max: number },\n  ): number {\n    const [startLng, startLat] = startCoordinate\n    const [endLng, endLat] = endCoordinate\n    const range = customRange || this.calculateCurvatureRange(startLng, startLat, endLng, endLat)\n    if (range.min < 0 || range.max > 1 || range.min > range.max) {\n      throw new Error(\"无效的曲率范围。必须满足: 0 <= min <= max <= 1\")\n    }\n    return this.curvature(key, range.min, range.max)\n  }\n\n  /** 清空曲率缓存 */\n  public clearCache(): void {\n    this.curvatureMap = {}\n  }\n\n  /** 获取当前缓存映射表（仅调试用途） */\n  public getCacheMap(): { [key: string]: number } {\n    return { ...this.curvatureMap }\n  }\n}\n\nexport default CurvatureCalculator\n\n\n","/**\n * 模块：2D 线路渲染器\n * 说明：负责 2D 模式下的曲线路径渲染（常驻曲线 + 尾迹小圆点）。\n * 设计：\n * - 依赖 `CurvatureCalculator` 计算每条线的曲率；\n * - 使用二次贝塞尔曲线在地理坐标空间生成曲线点；\n * - 常驻曲线使用 PathLayer，尾迹使用 ScatterplotLayer；\n * - 所有动画点同步按统一进度推进，避免交错时序。\n */\nimport type { BaseMapLine } from \"@orch-map/types\"\nimport type { CurvatureCalculator } from \"../utils/curvatureCalculator\"\nimport { PathLayer, ScatterplotLayer } from \"@deck.gl/layers\"\n\n// 默认连接线颜色（回退）\nconst DEFAULT_LINE_RGBA: [number, number, number, number] = [170, 170, 170, 90]\n// 默认移动点颜色（回退，alpha 在尾迹中会被覆盖）\nconst DEFAULT_DOT_RGB: [number, number, number] = [255, 255, 255]\n\n/**\n * 2D 尾迹点数据结构\n */\nexport interface DotPoint {\n  /** 小圆点在地理坐标中的位置 [lng, lat] */\n  position: [number, number]\n  /** 小圆点填充颜色，RGBA（0-255），用于实现由深到浅的尾迹渐变 */\n  color: [number, number, number, number]\n  /** 小圆点半径（像素），用于实现由大到小的尾迹渐变 */\n  radius: number\n}\n/**\n * 2D 常驻曲线路数据结构\n */\nexport interface FullPath {\n  /** 曲线的离散采样点数组，单位为地理坐标（经纬度） */\n  path: [number, number][]\n  /** 曲线颜色，RGBA（0-255） */\n  color: [number, number, number, number]\n  /** 曲线宽度（像素） */\n  width: number\n}\n\n/**\n * 工具函数：根据起终点与曲率生成二次贝塞尔曲线路径\n * @param start 起点经纬度 [lng, lat]\n * @param end 终点经纬度 [lng, lat]\n * @param curvature 曲率（0~1）；值越大弯曲越明显\n * @param segments 采样点数量；更大更平滑，性能成本更高，默认 64\n * @returns 采样后的路径坐标点数组（经纬度）\n */\nexport function buildQuadraticBezierPath(\n  start: [number, number],\n  end: [number, number],\n  curvature: number,\n  segments = 64,\n): [number, number][] {\n  const sx = start[0]\n  const sy = start[1]\n  const ex = end[0]\n  const ey = end[1]\n  const mx = (sx + ex) / 2\n  const my = (sy + ey) / 2\n  const dx = ex - sx\n  const dy = ey - sy\n  const length = Math.hypot(dx, dy) || 1\n  // 垂直方向单位向量\n  const nx = -dy / length\n  const ny = dx / length\n  // 控制点偏移（系数 0.3 约束弯曲强度，可外部调优）\n  const offset = curvature * 0.3 * length\n  const cx = mx + nx * offset\n  const cy = my + ny * offset\n\n  const path: [number, number][] = []\n  for (let i = 0; i <= segments; i++) {\n    const t = i / segments\n    const oneMinusT = 1 - t\n    const x = oneMinusT * oneMinusT * sx + 2 * oneMinusT * t * cx + t * t * ex\n    const y = oneMinusT * oneMinusT * sy + 2 * oneMinusT * t * cy + t * t * ey\n    path.push([x, y])\n  }\n  return path\n}\n\n/**\n * 类：LineRenderer2D\n * 说明：封装 2D 曲线渲染与尾迹渲染逻辑，供地图主类组合使用。\n */\nexport class LineRenderer2D {\n  private readonly curvatureCalculator: CurvatureCalculator\n\n  /**\n   * @param curvatureCalculator 曲率计算器实例\n   */\n  public constructor(curvatureCalculator: CurvatureCalculator) {\n    this.curvatureCalculator = curvatureCalculator\n  }\n\n  /**\n   * 创建常驻曲线图层（PathLayer）\n   * @param lines 业务线数据数组；每条线包含起终点经纬度\n   * @returns PathLayer 实例（包含所有曲线，禁用拾取）\n   */\n  public buildFullCurveLayer(lines: BaseMapLine[]): any {\n    const fullData: FullPath[] = lines.map(line => {\n      const curvature = this.curvatureCalculator.calculateCurvatureByCoordinates(\n        line.id,\n        line.startCoordinate,\n        line.endCoordinate,\n      )\n      const path = buildQuadraticBezierPath(line.startCoordinate, line.endCoordinate, curvature, 64)\n      const color = (line.color ?? DEFAULT_LINE_RGBA) as [number, number, number, number]\n      return { path, color, width: 0.3 }\n    })\n    return new PathLayer({\n      id: \"line-layer\",\n      data: fullData,\n      pickable: false,\n      widthScale: 1,\n      widthMinPixels: 0.3,\n      getPath: (d: FullPath) => d.path,\n      getColor: (d: FullPath) => d.color,\n      getWidth: (d: FullPath) => d.width,\n      // 启用虚线以降低视觉重量\n      dashJustified: true,\n      parameters: { cullMode: \"none\" },\n    })\n  }\n\n  /**\n   * 创建同步移动的多圆点尾迹图层（ScatterplotLayer）\n   * @param lines 业务线数据数组；每条线包含起终点经纬度\n   * @param progress 动画归一化进度 [0, 1)；所有线条共享进度，实现同步动画\n   * @param options 尾迹外观参数（可选）\n   *\n   * 间距说明：\n   * - 尾迹点之间的\"参数间距\"由 step = trailSpan / (dotsPerLine - 1) 决定；\n   * - 想更密：增大 dotsPerLine 或减小 trailSpan；想更疏：相反调整。\n   *\n   * 大小说明：\n   * - 点半径沿尾迹从头到尾插值：radius = tailRadius + (headRadius - tailRadius) * w；\n   * - headRadius 控制最大半径，tailRadius 控制最小半径。\n   * @param options.dotsPerLine 每条线的尾迹圆点数量；越大越密集，默认 12\n   * @param options.headRadius 尾迹最前端（头部）圆点半径（像素），默认 3\n   * @param options.tailRadius 尾迹末端（尾部）圆点半径（像素），默认 1\n   * @param options.headAlpha 尾迹头部圆点透明度（0-255），默认 255\n   * @param options.tailAlpha 尾迹尾部圆点透明度（0-255），默认 60\n   * @param options.trailSpan 尾迹覆盖曲线参数长度（0~1），控制\"队列\"长度，默认 0.06\n   * @returns ScatterplotLayer 实例（尾迹小圆点）\n   */\n  public buildMovingDotsLayer(\n    lines: BaseMapLine[],\n    progress: number,\n    options?: {\n      dotsPerLine?: number\n      headRadius?: number\n      tailRadius?: number\n      headAlpha?: number\n      tailAlpha?: number\n      trailSpan?: number\n    },\n  ): any {\n    const dots: DotPoint[] = []\n    const dotsPerLine = options?.dotsPerLine ?? 12\n    const headRadius = options?.headRadius ?? 1\n    const tailRadius = options?.tailRadius ?? 0.5\n    const headAlpha = options?.headAlpha ?? 255\n    const tailAlpha = options?.tailAlpha ?? 60\n    const trailSpan = options?.trailSpan ?? 0.01\n    const step = trailSpan / Math.max(1, dotsPerLine - 1)\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i]\n      const curvature = this.curvatureCalculator.calculateCurvatureByCoordinates(\n        line.id,\n        line.startCoordinate,\n        line.endCoordinate,\n      )\n\n      // 预计算二次贝塞尔控制点\n      const sx = line.startCoordinate[0]\n      const sy = line.startCoordinate[1]\n      const ex = line.endCoordinate[0]\n      const ey = line.endCoordinate[1]\n      const mx = (sx + ex) / 2\n      const my = (sy + ey) / 2\n      const dx = ex - sx\n      const dy = ey - sy\n      const length = Math.hypot(dx, dy) || 1\n      const nx = -dy / length\n      const ny = dx / length\n      const offset = curvature * 0.3 * length\n      const cx = mx + nx * offset\n      const cy = my + ny * offset\n\n      const baseRgb: [number, number, number] = Array.isArray(line.color)\n        ? [line.color[0] ?? DEFAULT_DOT_RGB[0], line.color[1] ?? DEFAULT_DOT_RGB[1], line.color[2] ?? DEFAULT_DOT_RGB[2]]\n        : DEFAULT_DOT_RGB\n\n      for (let j = 0; j < dotsPerLine; j++) {\n        const w = 1 - j / Math.max(1, dotsPerLine - 1) // 头部权重 1 -> 尾部 0\n        const tRaw = progress - j * step\n        const t = ((tRaw % 1) + 1) % 1 // wrap 到 [0,1)\n        const oneMinusT = 1 - t\n        const px = oneMinusT * oneMinusT * sx + 2 * oneMinusT * t * cx + t * t * ex\n        const py = oneMinusT * oneMinusT * sy + 2 * oneMinusT * t * cy + t * t * ey\n        const radius = Math.round(tailRadius + (headRadius - tailRadius) * w)\n        const alpha = Math.round(tailAlpha + (headAlpha - tailAlpha) * Math.pow(w, 1.5))\n        dots.push({ position: [px, py], color: [baseRgb[0], baseRgb[1], baseRgb[2], alpha], radius })\n      }\n    }\n\n    return new ScatterplotLayer({\n      id: \"line-trail-layer\",\n      data: dots,\n      pickable: false,\n      radiusUnits: \"pixels\",\n      radiusMinPixels: tailRadius,\n      radiusMaxPixels: headRadius + 2,\n      getPosition: (d: DotPoint) => d.position,\n      getFillColor: (d: DotPoint) => d.color,\n      getRadius: (d: DotPoint) => d.radius,\n      parameters: { cullMode: \"none\" },\n    })\n  }\n}\n","/**\n * 模块：3D 线路渲染器\n * 说明：负责 3D 模式下的弧线动画渲染，封装 ArcLayer 的构建逻辑。\n */\nimport { type BaseMapLine } from \"@orch-map/types\"\nimport { ArcLayer } from \"@deck.gl/layers\"\n\n// ArcLayerProps 类型定义（临时，直到从 DeckGL 库中获取）\nexport interface ArcLayerProps {\n  id?: string;\n  data?: any[];\n  pickable?: boolean;\n  getSourcePosition?: (d: any) => [number, number, number];\n  getTargetPosition?: (d: any) => [number, number, number];\n  getSourceTimestamp?: (d: any, info: { index: number }) => number;\n  getTargetTimestamp?: (d: any, info: { index: number }) => number;\n  timeRange?: [number, number];\n  getHeight?: number;\n  getSourceColor?: (d: any) => [number, number, number];\n  getTargetColor?: (d: any) => [number, number, number];\n  parameters?: Record<string, any>;\n  [key: string]: any;\n} \n\nconst DEFAULT_RGB: [number, number, number] = [200, 200, 200]\n\n/**\n * 类：LineRenderer3D\n * 说明：用于创建 3D 弧线图层。\n */\nexport class LineRenderer3D {\n  /**\n   * 创建 ArcLayer 图层\n   * @param lines 业务线数据\n   * @param timeRange 可见时间窗口 [start, end]\n   * @param lineOffset 每条线的起始偏移（秒）\n   * @param lineDuration 每条线的持续时长（秒）\n   */\n  public buildAnimatedLayer(lines: BaseMapLine[], timeRange: [number, number], lineOffset: number, lineDuration: number) {\n    return new ArcLayer({\n      id: \"line-layer\",\n      data: lines,\n      pickable: true,\n      getSourcePosition: (d: BaseMapLine) => [d.startCoordinate[0], d.startCoordinate[1], 100],\n      getTargetPosition: (d: BaseMapLine) => [d.endCoordinate[0], d.endCoordinate[1], 100],\n      getSourceTimestamp: (_d: BaseMapLine, { index }: { index: number }) => index * lineOffset,\n      getTargetTimestamp: (_d: BaseMapLine, { index }: { index: number }) => index * lineOffset + lineDuration,\n      timeRange,\n      getHeight: 0.6,\n      getSourceColor: (d: BaseMapLine) => {\n        if (Array.isArray(d.color)) {\n          return [d.color[0] ?? DEFAULT_RGB[0], d.color[1] ?? DEFAULT_RGB[1], d.color[2] ?? DEFAULT_RGB[2]]\n        }\n        return DEFAULT_RGB\n      },\n      getTargetColor: (d: BaseMapLine) => {\n        if (Array.isArray(d.color)) {\n          return [d.color[0] ?? DEFAULT_RGB[0], d.color[1] ?? DEFAULT_RGB[1], d.color[2] ?? DEFAULT_RGB[2]]\n        }\n        return DEFAULT_RGB\n      },\n      parameters: { cullMode: \"none\" },\n    })\n  }\n}\n","/**\n * 模块：地理图层常量\n * 说明：集中管理 Geo 图层的默认配色与默认属性，避免散落在业务中导致风格不一致。\n */\n// GeoJsonLayerProps 类型定义（临时，直到从 DeckGL 库中获取）\nexport interface GeoJsonLayerProps {\n  pickable?: boolean;\n  stroked?: boolean;\n  filled?: boolean;\n  lineWidthScale?: number;\n  lineWidthMinPixels?: number;\n  wrapLongitude?: boolean;\n  autoHighlight?: boolean;\n  highlightColor?: [number, number, number, number];\n  getLineColor?: (d: any) => [number, number, number, number];\n  getLineWidth?: (d: any) => number;\n  getPointRadius?: number;\n  getTextSize?: number;\n  getTextColor?: [number, number, number, number];\n  [key: string]: any;\n}\n\n/** 默认填充色 RGBA */\nexport const DEFAULT_GEO_FILL_COLOR: [number, number, number, number] = [9, 71, 119, 255]\n/** 默认边线色 RGBA */\nexport const DEFAULT_GEO_LINE_COLOR: [number, number, number, number] = [20, 128, 197, 255]\n/** 默认高亮色 RGBA */\nexport const DEFAULT_GEO_HIGHLIGHT_COLOR: [number, number, number, number] = [48, 121, 200, 255]\n\n/**\n * 地理图层的默认属性配置\n * @const {Object} DEFAULT_GEO_LAYER_PROPS\n */\nexport const DEFAULT_GEO_LAYER_PROPS: Partial<GeoJsonLayerProps> = {\n  /**\n   * 是否启用拾取功能，启用后可以与图层元素进行交互\n   */\n  pickable: true,\n\n  /**\n   * 是否绘制要素的边框线条\n   */\n  stroked: true,\n\n  /**\n   * 是否填充要素的内部区域\n   */\n  filled: true,\n\n  /**\n   * 是否将2D要素挤出为3D效果\n   */\n  // extruded: false, // Not part of local GeoJsonLayerProps\n\n  /**\n   * 线宽缩放比例，用于调整线条粗细\n   */\n  lineWidthScale: 1,\n\n  /**\n   * 线条最小宽度（像素），确保线条在任何缩放级别下的可见性\n   */\n  lineWidthMinPixels: 1,\n\n  /**\n   * 是否启用经度无限滚动，解决地图跨越180度经线的显示问题\n   */\n  wrapLongitude: true,\n\n  /**\n   * 是否自动高亮鼠标悬停的要素\n   */\n  autoHighlight: true,\n\n  /**\n   * 高亮状态下要素的颜色，RGBA格式 - 格式为[r, g, b, a]，取值范围0-255\n   */\n  highlightColor: DEFAULT_GEO_HIGHLIGHT_COLOR,\n\n  /**\n   * 要素边框的默认颜色，RGBA格式 - 格式为[r, g, b, a]，取值范围0-255\n   */\n  getLineColor: (_d) => DEFAULT_GEO_LINE_COLOR,\n\n  /**\n   * 要素边框的宽度，单位为像素\n   */\n  getLineWidth: () => 1,\n\n  /**\n   * 点要素的半径，单位为像素\n   */\n  getPointRadius: 100,\n\n  /**\n   * 文本标签的字体大小，单位为像素\n   */\n  getTextSize: 12,\n\n  /**\n   * 文本标签的颜色，RGBA格式\n   */\n  getTextColor: [255, 255, 255, 255],\n}\n","/**\n * 模块：GL 地图入口\n * 说明：负责 DeckGL 实例的使用与业务图层（Geo、点、弧线）装配与更新。\n * 设计要点：\n * - 尽量将渲染状态（选中、时间轴）与数据状态（points/lines/geo）分离；\n * - 通过 `MapLayerManager` 进行图层注册与替换，降低对 Deck 实例的直接依赖；\n * - 动画与交互尽量采用轻量更新（避免重建不必要对象）。\n */\n  import type { FeatureCollection , Feature } from \"@orch-map/types\"\nimport { DeckInstance } from \"./deckInstance\"\n\nimport type { MjolnirGestureEvent, MjolnirPointerEvent } from \"mjolnir.js\"\nimport { CurvatureCalculator } from \"../utils/curvatureCalculator\"\nimport { LineRenderer2D } from \"./line2d\"\nimport { LineRenderer3D } from \"./line3d\"\nimport { DEFAULT_GEO_FILL_COLOR, DEFAULT_GEO_LAYER_PROPS } from \"./glMap.const\"\nimport { isDef, TaskManager,type TimerTask } from \"@orch-map/utils\"\nimport { type BaseMapPoint, type BaseMapLine } from \"@orch-map/types\"\nimport { DEFAULT_SVG_ICONS } from \"./icon.layer\"\nimport IconAtlas, { type IconAtlasResult } from \"./iconAtlas\"\nimport MapLayerManager from \"./layerManager\"\nimport { GeoJsonLayer, IconLayer } from \"@deck.gl/layers\"\n\ntype IconPoint = BaseMapPoint & {\n  position: [number, number, number?]\n  icon: string\n  size: number\n  color: [number, number, number, number]\n}\n/**\n * GlMap\n * - 负责初始化 DeckGL 场景与各业务图层\n * - 暴露数据写入（setPoints/setLines/setGEOData）与销毁接口\n */\nexport default class GlMap {\n  /** 实例唯一标识（用于从 DeckInstance Map 中获取实例） */\n  private instanceId!: string\n  /** 图标图集构建结果（iconAtlas、iconMapping）。注意：DataURL 字符串占用内存较大，后续可考虑缓存与复用。 */\n  private iconAtlasResult: IconAtlasResult | null = null\n  // 动画相关状态（对齐 test01.html 的思路，但不依赖数据上的时间戳字段）\n  /** 当前动画时间（单位：秒的逻辑刻度） */\n  private currentTime = 0\n  /** 动画计时器任务句柄 */\n  private animationTimer: TimerTask | null = null\n  /** 折线数据源 */\n  private lines: BaseMapLine[] = []\n  /** 点数据源 */\n  private points: BaseMapPoint[] = []\n  // 当前选中的点 id\n  /** 选中点 ID（用于放大/高亮显示） */\n  private selectedPointId: string | null = null\n  /** 每 tick 前进的“秒数”（逻辑时间） */\n  private static readonly ANIMATION_SPEED = 60 // 每tick前进的“秒数”\n  /** 可见尾迹长度（逻辑时间） */\n  private static readonly TRAIL_LENGTH = 60 * 60 // 可见尾迹长度\n  /** 时间循环区间（逻辑时间），默认 6 小时 */\n  private static readonly TIME_LOOP = 6 * 60 * 60 // 循环区间，默认6小时\n\n  private mode: \"2d\" | \"3d\" = \"2d\"\n  /** 曲率计算器，用于为 2D 曲线路径生成控制点偏移量 */\n  private readonly curvatureCalculator = new CurvatureCalculator()\n  /** 2D 线路渲染器 */\n  private readonly lineRenderer2D = new LineRenderer2D(this.curvatureCalculator)\n  /** 3D 线路渲染器 */\n  private readonly lineRenderer3D = new LineRenderer3D()\n  /** 额外注册的 SVG 图标集合（由业务侧注入），键为 icon key，值为 SVG 字符串 */\n  private extraSvgIcons: Record<string, string> = {}\n\n  /**\n   * 构造函数\n   * @param instanceId Deck 实例标识\n   * @param container Canvas 容器\n   * @param callback 初始化完成回调（图标图集构建完毕后触发）\n   */\n  public constructor(instanceId: string, container: HTMLCanvasElement, mode: \"2d\" | \"3d\", callback: () => void) {\n    this.instanceId = instanceId\n    this.mode = mode\n    this.initDeck(container, callback)\n  }\n\n  private get currentDeckInstance() {\n    return DeckInstance.getInstance(this.instanceId)\n  }\n\n  /**\n   * 初始化 Deck 实例与图标图集\n   * 注意：\n   * - 这里通过容器宽度估算 minZoom，存在不同屏幕 DPR 下的视觉差异，可在后续优化中考虑；\n   * - 图标图集构建是异步的，构建完成前不应创建依赖图集的图层（本实现已在回调后触发动画）。\n   */\n  private async initDeck(container: HTMLCanvasElement, callback: () => void) {\n    const calculateMinZoom = (containerWidth: number): number => {\n      const zoom = Math.log2(containerWidth / 256)\n      return zoom - 1\n    }\n    const minZoom = calculateMinZoom((container.parentNode as HTMLElement).clientWidth)\n    await DeckInstance.setInstance(\n      this.instanceId,\n      container,\n      {\n        zoom: Math.max(0, Math.min(20, minZoom)),\n        latitude: 30,\n        longitude: 0,\n        // maxZoom 不在 MapViewState，交由 Deck 的控制器约束\n      },\n      {\n        // @ts-ignore\n        onClick: async (info: unknown, event: MjolnirGestureEvent) => {\n          await this.handleClickMapView(info, event);\n        },\n      },\n    )\n    // 注意：buildIconAtlas 会对 SVG 进行多次 rasterize，内存与耗时与图标数量成正比，\n    // 可在外层做缓存或离线预构建，以降低首次进入成本。\n    const iconAtlasResult = await IconAtlas.buildIconAtlas({ ...DEFAULT_SVG_ICONS })\n    this.iconAtlasResult = iconAtlasResult\n\n    // 若已注入自定义图标，初始化后重建一次图集\n    if (Object.keys(this.extraSvgIcons).length > 0) {\n      await this.rebuildIconAtlas()\n    }\n\n    callback()\n    this.startArcAnimation()\n  }\n\n  /**\n   * 地图空白处点击处理（取消点选中）\n   * 注意：`info` 为 deck 提供的拾取信息，这里仅判断 id 与图层，业务可按需扩展。\n   */\n  private async handleClickMapView(info: unknown, _event: MjolnirGestureEvent) {\n    const pick = info as { object?: { id?: string }; layer?: { id?: string } } | null\n    // 如果点击的不是任何对象，或者点击的对象不属于点图层，则取消选择\n    if (!pick?.object || pick.layer?.id !== \"point-layer\") {\n      if (this.selectedPointId) {\n        this.selectedPointId = null\n        await this.updateSelectionOverlay()\n      }\n    }\n  }\n\n  /**\n   * 设置国家/省份 GeoJSON 数据并注册基础底图图层\n   * @param geojsonData GeoJSON FeatureCollection\n   */\n  public async setGEOData(geojsonData: FeatureCollection) {\n    \n    let hoveredFeatureName: string | null = null\n    const geojsonLayer = new GeoJsonLayer({\n      ...DEFAULT_GEO_LAYER_PROPS,\n      id: \"geojson-layer\",\n      data: geojsonData,\n      // 防止在倾斜视角下遮挡后绘制的图层（例如 IconLayer）\n      getFillColor: (feature: Feature) => {\n        if (isDef(hoveredFeatureName) && hoveredFeatureName === feature.properties?.name) {\n          return [255, 255, 255, 255]\n        }\n        return DEFAULT_GEO_FILL_COLOR\n      },\n      updateTriggers: {\n        getFillColor: hoveredFeatureName,\n      },\n      onHover: (info: unknown) => {\n        const hover = info as { object?: { properties?: { name?: string } } } | null\n        if (hoveredFeatureName !== hover?.object?.properties?.name) {\n          this.currentDeckInstance?.redraw()\n        }\n        if (hover?.object) {\n          hoveredFeatureName = hover.object.properties?.name ?? null\n        } else {\n          hoveredFeatureName = null\n        }\n        return true\n      },\n    })\n    MapLayerManager.addLayer(\"geojson-layer\", geojsonLayer)\n    this.updateLayer()\n  }\n\n  /**\n   * 点对象点击处理（设置选中）\n   */\n  private async handleClickPoint(info: unknown) {\n    const pick = info as { object?: { id?: string | null } } | null\n    const clickedId: string | null = pick?.object?.id ?? null\n    this.selectedPointId = clickedId\n    // 触发重建相关图层以反映选中样式\n    await this.updateSelectionOverlay()\n  }\n\n  /**\n   * 将业务点数据转换为 IconLayer 需要的数据结构\n   * 注意：此处统一在 z 轴抬升避免深度冲突；可通过 `size` 与 `color` 做运行时调优。\n   */\n  private generateIconLayerData(points: Array<BaseMapPoint & { icon?: string; color?: [number, number, number, number] }>) {\n    type IconPoint = BaseMapPoint & {\n      position: [number, number, number?]\n      icon: string\n      size: number\n      color: [number, number, number, number]\n    }\n    // 转换 BaseMapPoint 数据为 IconLayer 需要的格式\n    const iconLayerData: IconPoint[] = points.map(point => ({\n      ...point,\n      // 抬升少量高度，避免与地面发生深度冲突/遮挡\n      position: [point.coordinate[0], point.coordinate[1], 50],\n      icon: point.icon ?? \"star\",\n      size: 24,\n      color: point.color ?? [255, 255, 255, 255],\n    }))\n    return iconLayerData\n  }\n\n  /**\n   * 根据输入数据构建 IconLayer 图层实例\n   * 注意：依赖 iconAtlasResult，如为空会导致图层纹理缺失，生产中建议增加兜底或等待图集就绪。\n   */\n  private async generateIconLayer(\n    iconLayerData: Array<\n      BaseMapPoint & {\n        position: [number, number, number?]\n        icon: string\n        size: number\n        color: [number, number, number, number]\n      }\n    >,\n  ) {``\n    \n    const iconLayer = new IconLayer({\n      id: \"point-layer\",\n      data: iconLayerData,\n      iconAtlas: this.iconAtlasResult?.iconAtlas,\n      iconMapping: this.iconAtlasResult?.iconMapping,\n      getPosition: (d) => d.position,\n      getIcon: (d) => d.icon,\n      getSize: (d) => (this.selectedPointId && d.id === this.selectedPointId ? d.size * 1.6 : d.size),\n      getColor: (d) => d.color,\n      pickable: true,\n      updateTriggers: {\n        getSize: this.selectedPointId,\n      },\n      onClick: (info: unknown) => {\n        this.handleClickPoint(info)\n      },\n    })\n    return iconLayer\n  }\n\n  /**\n   * 设置点数据（内部仅记录与触发覆盖层更新）\n   */\n  public async setPoints(points: BaseMapPoint[]) {\n    this.points = points\n    await this.updateSelectionOverlay()\n  }\n\n  /**\n   * 设置折线数据\n   */\n  public setLines(lines: BaseMapLine[]) {\n    this.lines = lines\n  }\n\n  // 3D/2D 线路渲染已拆分至 `line3d.ts` 与 `line2d.ts`，此方法不再需要。\n\n  /**\n   * 将当前 LayerManager 中的图层刷新到 Deck 实例\n   * 注意：`getLayers` 返回包含固定顺序 id 的数组，若某些图层未注册，则返回可能包含 undefined，\n   * 生产中建议在 `MapLayerManager` 内部过滤空值以降低渲染层判断成本（此处仅注释，不改变逻辑）。\n   */\n  private updateLayer() {\n    const layers = MapLayerManager.getLayers()\n    // Filter out undefined layers and ensure they are valid Layer instances\n    const validLayers = layers.filter(layer => layer !== undefined)\n    this.currentDeckInstance?.setProps({\n      layers: validLayers,\n    })\n  }\n\n  /**\n   * 根据当前时间推进动画并更新图层\n   * 性能注意：每次都会重建 AnimatedArcLayer 实例，数量大时有创建开销，可考虑用 updateTriggers 或 attribute 更新替代。\n   */\n  private updateArcAnimation() {\n    this.currentTime = (this.currentTime + GlMap.ANIMATION_SPEED) % GlMap.TIME_LOOP\n    const startTime = Math.max(0, this.currentTime - GlMap.TRAIL_LENGTH)\n    const timeRange: [number, number] = [startTime, this.currentTime]\n\n    if (this.mode === \"3d\") {\n      const animatedLayer = this.lineRenderer3D.buildAnimatedLayer(this.lines, timeRange, 300, 1000)\n      MapLayerManager.updateLayer(\"line-layer\", animatedLayer)\n    } else {\n      const baseLayer = this.lineRenderer2D.buildFullCurveLayer(this.lines)\n      const progress = this.currentTime / GlMap.TIME_LOOP\n      const dotsLayer = this.lineRenderer2D.buildMovingDotsLayer(this.lines, progress)\n      MapLayerManager.updateLayer(\"line-layer\", baseLayer)\n      MapLayerManager.updateLayer(\"line-trail-layer\", dotsLayer)\n    }\n    this.updateLayer()\n  }\n\n  // 构建/更新选中点的发光边框覆盖层\n  /**\n   * 根据选中状态重建点图层（用于同步 size/颜色等样式）\n   */\n  private async updateSelectionOverlay() {\n    const iconLayerData = this.generateIconLayerData(this.points)\n    const iconLayer = await this.generateIconLayer(iconLayerData)\n    MapLayerManager.updateLayer(\"point-layer\", iconLayer)\n    this.updateLayer()\n  }\n\n  /**\n   * 业务无关 API：注册额外 SVG 图标，键为 icon key，值为内联 SVG 字符串。\n   * 若图集已构建，则重建图集并刷新当前点图层。\n   */\n  public async registerExtraSvgIcons(icons: Record<string, string>) {\n    this.extraSvgIcons = { ...this.extraSvgIcons, ...icons }\n    if (this.iconAtlasResult) {\n      await this.rebuildIconAtlas()\n    }\n  }\n\n  /**\n   * 重建 IconAtlas：合并默认与额外图标，更新图层\n   */\n  private async rebuildIconAtlas() {\n    const merged = { ...DEFAULT_SVG_ICONS, ...this.extraSvgIcons }\n    this.iconAtlasResult = await IconAtlas.buildIconAtlas(merged)\n    await this.updateSelectionOverlay()\n  }\n\n  /**\n   * 启动动画定时器\n   * 注意：外部需在组件卸载时调用 `destroy` 释放计时器；也可进一步与 `DeckInstance` 生命周期对齐管理。\n   */\n  private startArcAnimation() {\n    if (this.animationTimer) {\n      this.animationTimer.destroy()\n      this.animationTimer = null\n    }\n    this.animationTimer = new TaskManager.Timer({\n      description: \"glmap-arc-animation\",\n      time: 10,\n      once: false,\n      fn: this.updateArcAnimation.bind(this),\n    })\n  }\n\n  /**\n   * 销毁内部资源\n   * 注意：目前仅销毁计时器，Deck 实例的销毁需由外部调用 `DeckInstance.removeInstance` 完成资源回收。\n   */\n  public destroy() {\n    if (this.animationTimer) {\n      this.animationTimer.destroy()\n      this.animationTimer = null\n    }\n  }\n}\n","/**\n * 模块：默认 SVG 图标集合\n * 说明：以内联 SVG 字符串形式维护少量通用图标，便于构建运行时的 IconAtlas。\n * 优化建议：\n * - 若图标集稳定，建议转为静态 PNG/SVG 资源并配合构建产物缓存；\n * - 对于颜色可变需求，可考虑使用 SDF 或多色图层方案减少图集尺寸与数量。\n */\n\n// 预定义的SVG图标集合\n/**\n * @description: 默认的 SVG 图标集合\n * 默认提供 circle, star, diamond 三个图标\n */\nexport const DEFAULT_SVG_ICONS = {\n  circle: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 8 8\" width=\"8\" height=\"8\">\n    <circle cx=\"4\" cy=\"4\" r=\"3\" fill=\"currentColor\" />\n  </svg>`,\n\n  star: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 8 8\" width=\"8\" height=\"8\">\n    <path fill=\"currentColor\" d=\"M4 5.757L6.06 7 5.455 4.656 7.5 3.08l-2.396-.204L4 1 3.104 2.876.5 3.08l2.045 1.576L1.94 7z\"/>\n  </svg>`,\n\n  diamond: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 8 8\" width=\"8\" height=\"8\">\n    <path fill=\"currentColor\" d=\"M4 1L1 4l3 3 3-3L4 1z\"/>\n  </svg>`,\n}\n","/**\n * 模块：图标图集 IconAtlas\n * 说明：将若干 SVG 字符串 rasterize 到同一张 Canvas，生成可供 IconLayer 使用的 iconAtlas 与 iconMapping。\n * 性能与内存注意：\n * - 多个 SVG 需要逐个转 Image 后再绘制，数量大时耗时明显；\n * - 最终通过 toDataURL 生成 Base64 图片，字符串会占用较大内存，建议上层缓存与复用；\n * - 若可预知图标集，推荐离线构建并作为静态资源下发，减少运行时开销。\n */\n// 定义图标映射接口\nexport interface IconMapping {\n  [key: string]: {\n    x: number\n    y: number\n     width: number\n    height: number\n    mask: boolean\n  }\n}\n\n// 定义图标集合结果接口\nexport interface IconAtlasResult {\n  iconAtlas: string\n  iconMapping: IconMapping\n}\n\nexport default class IconAtlas {\n  /**\n   * 将 SVG 字符串转为 HTMLImageElement\n   */\n  private static svgToImage(svgString: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n      const img = new Image()\n      const blob = new Blob([svgString], { type: \"image/svg+xml\" })\n      const url = URL.createObjectURL(blob)\n\n      img.onload = () => {\n        URL.revokeObjectURL(url)\n        resolve(img)\n      }\n\n      img.onerror = () => {\n        URL.revokeObjectURL(url)\n        reject(new Error(\"Failed to load SVG\"))\n      }\n\n      img.src = url\n    })\n  }\n\n  // 构建图标集合的工具方法\n  public static async buildIconAtlas(icons: { [key: string]: string }): Promise<IconAtlasResult> {\n    const iconMapping: IconMapping = {}\n    let canvasWidth = 0\n    let canvasHeight = 0\n\n    // 首先计算需要的画布大小\n    for (const [iconName, iconSvg] of Object.entries(icons)) {\n      const img = await IconAtlas.svgToImage(iconSvg)\n      iconMapping[iconName] = {\n        x: canvasWidth,\n        y: 0,\n        width: img.width,\n        height: img.height,\n        mask: true,\n      }\n      canvasWidth += img.width\n      canvasHeight = Math.max(canvasHeight, img.height)\n    }\n\n    // 创建最终的图标图集\n    const canvas = document.createElement(\"canvas\")\n    const ctx = canvas.getContext(\"2d\")\n    if (!ctx) {\n      throw new Error(\"Failed to get 2D context from canvas\")\n    }\n\n    canvas.width = canvasWidth\n    canvas.height = canvasHeight\n\n    // 绘制所有图标到一个图集中\n    for (const [iconName, iconSvg] of Object.entries(icons)) {\n      const img = await IconAtlas.svgToImage(iconSvg)\n      const { x } = iconMapping[iconName]\n      ctx.drawImage(img, x, 0)\n    }\n\n    return {\n      iconAtlas: canvas.toDataURL(),\n      iconMapping,\n    }\n  }\n}\n","/**\n * 模块：图层管理器\n * 说明：集中管理图层的增删改查，降低业务代码直接依赖 Deck 层对象；\n * 注意：当前实现未对返回数组进行空值过滤，外部在 setProps 时需接受 undefined；\n *       可在不改变逻辑的前提下通过注释给出优化建议。\n */\n// Layer 类型定义（临时，直到从 DeckGL 库中获取）\nexport type Layer = any;\n\nexport default class MapLayerManager {\n  /** 内部存储：layerId -> layer 实例 */\n  private static layerMap: Map<string, LayerLike> = new Map()\n\n  /**\n   * 新增图层（若已存在则委托为 update）\n   */\n  public static addLayer(id: string, layer: LayerLike) {\n    if (MapLayerManager.layerMap.has(id)) {\n      MapLayerManager.updateLayer(id, layer)\n      return\n    }\n    MapLayerManager.layerMap.set(id, layer)\n  }\n\n  /**\n   * 更新图层：\n   * - 若传入 Layer 实例，直接替换（必要时校正 id）；\n   * - 若传入 props 片段，基于旧实例构造器重建（浅合并 props）。\n   * 性能提示：重建 Layer 实例有一定开销，数据量大时可考虑 updateTriggers 或 attribute 更新。\n   */\n  public static updateLayer(id: string, layerOrProps: LayerLike | LayerPropsObject) {\n    const isLayerInstance = (candidate: unknown): candidate is LayerLike =>\n      !!candidate &&\n      typeof candidate === \"object\" &&\n      \"constructor\" in candidate &&\n      typeof (candidate as { constructor: unknown }).constructor === \"function\"\n\n    // 如果该 id 的图层尚不存在\n    if (!MapLayerManager.layerMap.has(id)) {\n      if (isLayerInstance(layerOrProps)) {\n        MapLayerManager.layerMap.set(id, layerOrProps)\n      }\n      return\n    }\n\n    const oldLayer = MapLayerManager.layerMap.get(id) as LayerLike\n\n    // 如果传入的是完整的 Layer 实例，直接替换（必要时重建以确保 id 一致）\n    if (isLayerInstance(layerOrProps)) {\n      const incomingLayer = layerOrProps\n      const incomingProps = incomingLayer.props ?? {}\n      const incomingId = (incomingProps as Record<string, unknown>)[\"id\"]\n      if (typeof incomingId === \"string\" && incomingId !== id) {\n        const Ctor = (incomingLayer as unknown as { constructor: new (p: LayerPropsObject) => LayerLike }).constructor\n        const rebuilt = new Ctor({\n          ...incomingProps,\n          id,\n        })\n        MapLayerManager.layerMap.set(id, rebuilt)\n      } else {\n        MapLayerManager.layerMap.set(id, incomingLayer)\n      }\n      return\n    }\n\n    // 否则视为部分 props，合并旧 props 与新 props 后重建，新 props 覆盖旧值\n    const OldCtor = (oldLayer as unknown as { constructor: new (p: LayerPropsObject) => LayerLike }).constructor\n    const newLayer = new OldCtor({\n      ...(oldLayer.props ?? {}),\n      ...(layerOrProps as LayerPropsObject),\n      id,\n    })\n    MapLayerManager.layerMap.set(id, newLayer)\n  }\n\n  /**\n   * 移除图层\n   */\n  public static removeLayer(id: string) {\n    if (MapLayerManager.layerMap.has(id)) {\n      MapLayerManager.layerMap.delete(id)\n    }\n  }\n\n  /**\n   * 以固定顺序返回所有图层实例\n   * 风险提示：若对应 id 不存在，返回数组中会包含 undefined。\n   * 可选优化（不改变逻辑）：在此处过滤空值，减少每帧渲染时 Deck 对无效项的处理成本。\n   */\n  public static getLayers() {\n    return [\"geojson-layer\", \"point-layer\", \"line-layer\", \"line-trail-layer\"].map(id => MapLayerManager.layerMap.get(id))\n  }\n}\n\n/** Layer 实例的最小约束：需可通过构造器以 props 重建，并带有可读 props */\nexport type LayerPropsObject = Record<string, unknown>\n\n// 使用 deck.gl 的 Layer 类型作为 LayerLike\nexport type LayerLike = Layer\n","import {type IMapRenderer, type  MapRendererConfig, MapRendererType } from \"../interfaces\"\nimport EchartsMap from \"../echarts-geo\"\nimport { DeckglMapAdapter } from \"../adapters/DeckglMapAdapter\"\nimport MapStateManager from \"../MapStateManager\"\nimport { MapLevel } from \"@orch-map/types\"\n\n\n/**\n * 地图渲染器工厂\n * 负责根据配置创建对应的渲染器实例\n */\nexport class MapRendererFactory {\n  /**\n   * 创建地图渲染器\n   * @param type 渲染器类型\n   * @param config 渲染器配置\n   * @returns 地图渲染器实例\n   */\n  static createRenderer(type: MapRendererType, config: MapRendererConfig) {\n    switch (type) {\n      case MapRendererType.ECHARTS:\n        return new EchartsMap(config.container, config)\n      \n      case MapRendererType.DECKGL:\n        return new DeckglMapAdapter(config)\n      \n      default:\n        throw new Error(`Unsupported renderer type: ${type}`)\n    }\n  }\n\n  /**\n   * 检查是否支持指定的渲染器类型\n   * @param type 渲染器类型\n   * @returns 是否支持\n   */\n  static isSupported(type: string): type is MapRendererType {\n    return type === MapRendererType.ECHARTS || type === MapRendererType.DECKGL\n  }\n\n  /**\n   * 获取所有支持的渲染器类型\n   * @returns 支持的渲染器类型列表\n   */\n  static getSupportedTypes(): MapRendererType[] {\n    return Object.values(MapRendererType)\n  }\n\n  /**\n   * 根据环境自动选择最佳渲染器\n   * @param config 渲染器配置\n   * @returns 推荐的渲染器类型\n   */\n  static getRecommendedType(config?: Partial<MapRendererConfig>): MapRendererType {\n    // 如果指定了 3D 模式，推荐使用 DeckGL\n    if (config?.mode === \"3d\") {\n      return MapRendererType.DECKGL\n    }\n\n    // 检查是否支持 WebGL\n    const canvas = document.createElement('canvas')\n    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl')\n    \n    if (gl) {\n      // 如果支持 WebGL，默认使用 DeckGL 以获得更好的性能\n      return MapRendererType.DECKGL\n    }\n\n    // 否则回退到 ECharts\n    return MapRendererType.ECHARTS\n  }\n}\n\n// 导出 MapRendererType 枚举\nexport { MapRendererType }","import type { IMapRenderer, MapRendererConfig, MapRendererEvents } from \"../interfaces/IMapRenderer\"\nimport type { BaseMapPoint, BaseMapLine, MapLevel } from \"../interfaces\"\nimport type { FeatureCollection } from \"@orch-map/types\"\nimport { MapRendererFactory, MapRendererType } from \"../factory/MapRendererFactory\"\nimport { DeckglMapAdapter } from \"./DeckglMapAdapter\" \nimport MapStateManager from \"../MapStateManager\"\n\n/**\n * 统一地图组件配置\n */\nexport interface UnifiedMapConfig extends MapRendererConfig {\n  /**\n   * 渲染器类型\n   * 如果不指定，将自动选择最佳渲染器\n   */\n  renderType?: MapRendererType\n  \n  /**\n   * 是否启用自动切换\n   * 当渲染器初始化失败时自动切换到备用渲染器\n   */\n  autoFallback?: boolean\n  \n  /**\n   * 自定义图标（仅 DeckGL 支持）\n   */\n  customIcons?: Record<string, string>\n}\n\n/**\n * 统一地图组件\n * 提供统一的 API 来使用不同的地图渲染器\n */\nexport class UnifiedMapComponent {\n  private renderer: IMapRenderer | null = null\n  private config: UnifiedMapConfig\n  private renderType: MapRendererType\n  private isInitialized = false\n\n  constructor(config: UnifiedMapConfig) {\n    this.config = config\n    \n    // 确定渲染器类型\n    this.renderType = config.renderType || MapRendererFactory.getRecommendedType(config)\n    \n    // 初始化渲染器\n    this.initRenderer()\n  }\n\n  /**\n   * 初始化渲染器\n   */\n  private async initRenderer(): Promise<void> {\n    try {\n      // 创建渲染器实例\n      this.renderer = MapRendererFactory.createRenderer(this.renderType, this.config)\n      \n      // 如果有自定义图标且是 DeckGL 渲染器，注册图标\n      if (this.config.customIcons && this.renderer instanceof DeckglMapAdapter) {\n        await this.renderer.registerExtraIcons?.(this.config.customIcons)\n      }\n      \n      this.isInitialized = true\n    } catch (error) {\n      console.error(`Failed to initialize ${this.renderType} renderer:`, error)\n      \n      // 如果启用了自动回退，尝试使用备用渲染器\n      if (this.config.autoFallback) {\n        this.fallbackToAlternativeRenderer()\n      } else {\n        throw error\n      }\n    }\n  }\n\n  /**\n   * 回退到备用渲染器\n   */\n  private fallbackToAlternativeRenderer(): void {\n    const alternativeType = this.renderType === MapRendererType.DECKGL ? MapRendererType.ECHARTS : MapRendererType.DECKGL\n    \n    console.warn(`Falling back to ${alternativeType} renderer`)\n    \n    try {\n      this.renderType = alternativeType\n      this.renderer = MapRendererFactory.createRenderer(alternativeType, this.config)\n      this.isInitialized = true\n    } catch (error) {\n      console.error(\"Failed to initialize fallback renderer:\", error)\n      throw new Error(\"Failed to initialize any available renderer\")\n    }\n  }\n\n  /**\n   * 获取当前使用的渲染器类型\n   */\n  getCurrentRendererType(): MapRendererType {\n    return this.renderType\n  }\n\n  /**\n   * 切换渲染器类型\n   * @param type 新的渲染器类型\n   */\n  async switchRenderer(type: MapRendererType): Promise<void> {\n    if (type === this.renderType) {\n      return\n    }\n\n    // 保存当前数据\n    const currentState = this.saveCurrentState()\n    \n    // 销毁当前渲染器\n    if (this.renderer) {\n      this.renderer.destroy()\n    }\n\n    // 创建新渲染器\n    this.renderType = type\n    this.renderer = MapRendererFactory.createRenderer(type, this.config)\n    \n    // 恢复数据\n    await this.restoreState(currentState)\n    \n    this.isInitialized = true\n  }\n\n  /**\n   * 保存当前状态\n   */\n  private saveCurrentState(): any {\n    // 这里可以保存当前的数据状态\n    // 实际实现需要根据具体需求来定\n    return {\n      // points, lines, geoData, etc.\n    }\n  }\n\n  /**\n   * 恢复状态\n   */\n  private async restoreState(state: any): Promise<void> {\n    // 恢复之前保存的状态\n    // 实际实现需要根据具体需求来定\n  }\n\n  /**\n   * 设置地理数据\n   */\n  async setGeoData(boundary: FeatureCollection): Promise<void> {\n    if (!this.renderer) {\n      throw new Error(\"Renderer not initialized\")\n    }\n    // 通过状态管理器更新，会自动同步到所有渲染器\n    MapStateManager.setGeoData(boundary)\n  }\n\n  /**\n   * 设置点数据\n   */\n  async setPoints(points: BaseMapPoint[]): Promise<void> {\n    if (!this.renderer) {\n      throw new Error(\"Renderer not initialized\")\n    }\n  }\n\n  /**\n   * 设置线数据\n   */\n  async setLines(lines: BaseMapLine[]): Promise<void> {\n    if (!this.renderer) {\n      throw new Error(\"Renderer not initialized\")\n    }\n  }\n\n  /**\n   * 更新地图层级\n   */\n  updateMapLevel(level: MapLevel): void {\n    if (!this.renderer) {\n      throw new Error(\"Renderer not initialized\")\n    }\n  }\n\n  /**\n   * 设置点样式\n   */\n  setPointStyle(seriesName: string, styleProcessor: (point: BaseMapPoint) => void): void {\n    if (!this.renderer) {\n      throw new Error(\"Renderer not initialized\")\n    }\n    this.renderer.setPointStyle?.(seriesName, styleProcessor)\n  }\n\n  /**\n   * 注册额外的图标（仅 DeckGL 支持）\n   */\n  async registerExtraIcons(icons: Record<string, string>): Promise<void> {\n    if (!this.renderer) {\n      throw new Error(\"Renderer not initialized\")\n    }\n    \n    if (this.renderer instanceof DeckglMapAdapter) {\n      return this.renderer.registerExtraIcons?.(icons)\n    } else {\n      console.warn(\"Current renderer does not support custom icons\")\n    }\n  }\n\n  /**\n   * 调整地图大小\n   */\n  resize(): void {\n    if (!this.renderer) {\n      throw new Error(\"Renderer not initialized\")\n    }\n    this.renderer.resize()\n  }\n\n  /**\n   * 销毁组件\n   */\n  destroy(): void {\n    if (this.renderer) {\n      this.renderer.destroy()\n      this.renderer = null\n    }\n    this.isInitialized = false\n  }\n\n  /**\n   * 检查是否已初始化\n   */\n  isReady(): boolean {\n    return this.isInitialized\n  }\n\n  /**\n   * 等待初始化完成\n   */\n  async waitForReady(): Promise<void> {\n    return new Promise((resolve) => {\n      if (this.isInitialized) {\n        resolve()\n      } else {\n        const checkInterval = setInterval(() => {\n          if (this.isInitialized) {\n            clearInterval(checkInterval)\n            resolve()\n          }\n        }, 100)\n      }\n    })\n  }\n}","/**\n * ECharts 渲染器\n * 基于 ECharts 的 2D 地图渲染实现\n */\nimport { BaseMapPoint, BaseMapLine, MapLevel, LayerData, LayerType, FeatureCollection } from \"../interfaces\";\nimport { IMapRenderer, MapRendererConfig } from \"../interfaces\";\nimport EchartsMap from \"../echarts-geo\";\nimport { type PointSeries, type LineSeriesDataItem, type PointSeriesDataItem } from \"../echarts-geo/types\";\nimport type { SeriesOption } from \"echarts\";\nimport MapStateManager from \"../MapStateManager\";\nimport { getGeoJsonData } from \"../utils/geoDataService\";\n\ntype MapEventHandler = (data: unknown) => void;\n\nfunction isPointEventParams(params: unknown): params is { coordinate?: [number, number]; data?: { properties?: Record<string, unknown> } } {\n  if (!params || typeof params !== \"object\") return false\n  const p = params as { coordinate?: unknown; data?: unknown }\n  const coordOk = !p.coordinate || (Array.isArray(p.coordinate) && typeof p.coordinate[0] === \"number\" && typeof p.coordinate[1] === \"number\")\n  const dataOk = !p.data || typeof p.data === \"object\"\n  return coordOk && dataOk\n}\n\nfunction isAreaEventParams(params: unknown): params is { region?: Record<string, unknown> } {\n  if (!params || typeof params !== \"object\") return false\n  const p = params as { region?: unknown }\n  return !p.region || typeof p.region === \"object\"\n}\n\nexport class EChartsMapRenderer implements IMapRenderer {\n  private container: HTMLElement;\n  private config: MapRendererConfig;\n  private echartsMap!: EchartsMap;\n  private eventHandlers: Map<string, MapEventHandler[]> = new Map();\n\n  constructor(container: HTMLElement, config: MapRendererConfig) {\n    this.container = container;\n    this.config = config;\n    this.initECharts();\n  }\n\n  /**\n   * 初始化 ECharts\n   */\n  private initECharts(): void {\n    try {\n      this.echartsMap = new EchartsMap(this.container, {\n        events: {\n          onClickPoint: (params: unknown) => {\n            const coord = isPointEventParams(params) && params.coordinate ? params.coordinate : [0, 0]\n            const data = isPointEventParams(params) ? params.data : undefined\n            this.emit(\"click\", {\n              coordinate: coord,\n              feature: data,\n              properties: (data as { properties?: Record<string, unknown> } | undefined)?.properties\n            });\n          },\n          onHoverPoint: (params: unknown) => {\n            const coord = isPointEventParams(params) && params.coordinate ? params.coordinate : [0, 0]\n            const data = isPointEventParams(params) ? params.data : undefined\n            this.emit(\"hover\", {\n              coordinate: coord,\n              feature: data,\n              properties: (data as { properties?: Record<string, unknown> } | undefined)?.properties\n            });\n          },\n          onClickArea: (params?: unknown) => {\n            const region = isAreaEventParams(params) ? params.region : undefined\n            this.emit(\"click\", {\n              coordinate: [0, 0],\n              feature: params,\n              properties: region\n            });\n          },\n          onDoubleClickArea: (nextLevel: MapLevel, params?: unknown) => {\n            const region = isAreaEventParams(params) ? params.region : undefined\n            MapStateManager.curLevel = nextLevel;\n            this.emit(\"doubleClick\", {\n              coordinate: [0, 0],\n              feature: params,\n              properties: region\n            });\n          },\n          onHoverArea: (params?: unknown) => {\n            const region = isAreaEventParams(params) ? params.region : undefined\n            this.emit(\"hover\", {\n              coordinate: [0, 0],\n              feature: params,\n              properties: region\n            });\n          }\n        }\n      });\n    } catch (error) {\n      console.error(\"Failed to initialize ECharts:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * 渲染图层数据\n   */\n  render(data: LayerData[]): void {\n    const series: SeriesOption[] = [];\n\n    data.forEach(layer => {\n      switch (layer.type) {\n        case LayerType.POINT:\n          this.addPointSeries(series, layer);\n          break;\n        case LayerType.LINE:\n          this.addLineSeries(series, layer);\n          break;\n        case LayerType.GEO:\n          this.addGeoSeries(layer);\n          break;\n      }\n    });\n\n    if (series.length > 0) {\n      this.echartsMap.updateSeries(series);\n    }\n  }\n\n  /**\n   * 添加点图层\n   */\n  private addPointSeries(series: SeriesOption[], layer: LayerData): void {\n    const points = layer.data as BaseMapPoint[];\n    const pointSeries: PointSeries<{ raw: BaseMapPoint }> = {\n      type: \"scatter\",\n      data: points.map<PointSeriesDataItem<{ raw: BaseMapPoint }>>(point => ({\n        name: point.id,\n        value: [point.coordinate[0], point.coordinate[1]],\n        businessInfo: { raw: point },\n        symbol: point.icon || \"circle\",\n        itemStyle: {\n          color: point.color ? `rgba(${point.color.join(\",\")})` : \"#1890ff\"\n        }\n      }))\n    }\n    series.push(pointSeries as unknown as SeriesOption)\n  }\n\n  /**\n   * 添加线图层\n   */\n  private addLineSeries(series: SeriesOption[], layer: LayerData): void {\n    const lines = layer.data as BaseMapLine[];\n    const lineSeries = {\n      type: \"lines\",\n      coordinateSystem: \"geo\",\n      data: lines.map<LineSeriesDataItem<{ raw: BaseMapLine }>>(line => ({\n        name: line.id,\n        raw: line,\n        coords: [line.startCoordinate, line.endCoordinate],\n        lineStyle: {\n          color: line.color ? `rgba(${line.color.join(\",\")})` : \"#1890ff\",\n          width: 2,\n          opacity: 1,\n          curveness: 0\n        }\n      }))\n    }\n    series.push(lineSeries as unknown as SeriesOption)\n  }\n\n  /**\n   * 添加地理图层\n   */\n  private addGeoSeries(layer: LayerData): void {\n    const geoData = layer.data as FeatureCollection;\n    this.echartsMap.setGEOData(geoData, geoData);\n  }\n\n  /**\n   * 设置地图级别\n   */\n  async setMapLevel(level: MapLevel, region?: string): Promise<void> {\n    try {\n      const geoData = await getGeoJsonData({\n        mapLevel: level,\n        country: region ?? \"\",\n        region: region ?? \"\",\n        mapType: \"echart\",\n      });\n      this.echartsMap.updateMapLevel(level);\n      this.setGeoData(geoData);\n    } catch (error) {\n      console.error(\"Failed to set map level:\", error);\n    }\n  }\n\n  /**\n   * 设置点数据\n   */\n  setPoints(points: BaseMapPoint[]): Promise<void> {\n    this.render([{\n      type: LayerType.POINT,\n      data: points\n    }]);\n    return Promise.resolve();\n  }\n\n  /**\n   * 设置线数据\n   */\n  setLines(lines: BaseMapLine[]): Promise<void> {\n    this.render([{\n      type: LayerType.LINE,\n      data: lines\n    }]);\n    return Promise.resolve();\n  }\n\n\n  /**\n   * 设置地图数据\n   */\n  setGeoData(geoData: FeatureCollection): Promise<void>  {\n    this.echartsMap.setGEOData(geoData, geoData);\n    return Promise.resolve();\n  }\n\n  /**\n   * 监听事件\n   */\n  on(event: string, callback: MapEventHandler): void {\n    if (!this.eventHandlers.has(event)) {\n      this.eventHandlers.set(event, []);\n    }\n    this.eventHandlers.get(event)!.push(callback);\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(event: string, callback: MapEventHandler): void {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      const index = handlers.indexOf(callback);\n      if (index > -1) {\n        handlers.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * 触发事件\n   */\n  private emit(event: string, data: unknown): void {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      handlers.forEach(handler => handler(data));\n    }\n  }\n\n  /**\n   * 调整地图大小\n   */\n  resize(): void {\n    if (this.echartsMap) {\n      this.echartsMap.resizeMap();\n    }\n  }\n\n  /**\n   * 销毁渲染器\n   */\n  destroy(): void {\n    if (this.echartsMap) {\n      this.echartsMap.destroy();\n    }\n    this.eventHandlers.clear();\n  }\n}","/**\n * DeckGL 渲染器\n * 基于 DeckGL 的 3D 地图渲染实现\n */\nimport { BaseMapPoint, BaseMapLine, MapLevel, LayerData, LayerType } from \"../interfaces\";\nimport { IMapRenderer, MapRendererConfig } from \"../interfaces/IMapRenderer\";\nimport GlMap from \"../deckgl\";\nimport type { FeatureCollection } from \"@orch-map/types\";\nimport { getGeoJsonData } from \"../utils/geoDataService\";\n\ntype MapEventHandler = (data: unknown) => void;\n\nexport class DeckGLMapRenderer implements IMapRenderer {\n  private container: HTMLElement;\n  private config: MapRendererConfig;\n  private glMap!: GlMap;\n  private eventHandlers: Map<string, MapEventHandler[]> = new Map();\n\n  constructor(container: HTMLElement, config: MapRendererConfig) {\n    this.container = container;\n    this.config = config;\n    this.initDeckGL();\n  }\n\n  /**\n   * 初始化 DeckGL\n   */\n  private initDeckGL(): void {\n    try {\n      // 为 DeckGL 创建 canvas 元素\n      const canvas = document.createElement(\"canvas\")\n      canvas.style.width = \"100%\"\n      canvas.style.height = \"100%\"\n      this.container.appendChild(canvas)\n\n      const instanceId = `deckgl-renderer-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n      this.glMap = new GlMap(\n        instanceId,\n        canvas,\n        \"3d\", // DeckGL 渲染器默认使用 3D 模式\n        () => {\n          console.log(\"DeckGL renderer initialized\")\n        }\n      )\n    } catch (error) {\n      console.error(\"Failed to initialize DeckGL:\", error);\n      throw error;\n    }\n  }\n\n\n  resize(): void {\n    // this.glMap.resize(); \n  }\n\n  /**\n   * 渲染图层数据\n   */\n  render(data: LayerData[]): void {\n    data.forEach((layer) => {\n      switch (layer.type) {\n        case LayerType.POINT:\n          this.addPointLayer(layer);\n          break;\n        case LayerType.LINE:\n          this.addLineLayer(layer);\n          break;\n        case LayerType.GEO:\n          this.addGeoLayer(layer);\n          break;\n      }\n    });\n  }\n\n  /**\n   * 添加点图层\n   */\n  private addPointLayer(layer: LayerData): void {\n    const points = layer.data as BaseMapPoint[];\n    this.glMap.setPoints(points);\n  }\n\n  /**\n   * 添加线图层\n   */\n  private addLineLayer(layer: LayerData): void {\n    const lines = layer.data as BaseMapLine[];\n    this.glMap.setLines(lines);\n  }\n\n  /**\n   * 添加地理图层\n   */\n  private addGeoLayer(layer: LayerData): void {\n    const geoData = layer.data as FeatureCollection;\n    if (this.isFeatureCollection(geoData)) {\n      this.glMap.setGEOData(geoData);\n    }\n  }\n\n  /**\n   * 设置地图级别\n   */\n  async setMapLevel(level: MapLevel, region?: string): Promise<void> {\n    try {\n      const geoData = await getGeoJsonData({\n        mapLevel: level,\n        country: region ?? \"\",\n        region: region ?? \"\",\n        mapType: \"deckgl\",\n      });\n      this.setGeoData(geoData);\n    } catch (error) {\n      console.error(\"Failed to set map level:\", error);\n    }\n  }\n\n  /**\n   * 添加点数据\n   */\n  setPoints(points: BaseMapPoint[]): Promise<void> {\n    this.glMap.setPoints(points);\n    return Promise.resolve();\n  }\n\n  /**\n   * 添加线数据\n   */\n  setLines(lines: BaseMapLine[]): Promise<void> {\n    this.glMap.setLines(lines);\n    return Promise.resolve();\n  }\n\n  /**\n   * 设置地图数据\n   */\n  setGeoData(geoData: FeatureCollection): Promise<void> {\n    if (this.isFeatureCollection(geoData)) {\n      this.glMap.setGEOData(geoData);\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * 监听事件\n   */\n  on(event: string, callback: MapEventHandler): void {\n    if (!this.eventHandlers.has(event)) {\n      this.eventHandlers.set(event, []);\n    }\n    this.eventHandlers.get(event)!.push(callback);\n  }\n\n  /**\n   * 取消监听事件\n   */\n  off(event: string, callback: MapEventHandler): void {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      const index = handlers.indexOf(callback);\n      if (index > -1) {\n        handlers.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * 触发事件\n   */\n  private emit(event: string, data: unknown): void {\n    const handlers = this.eventHandlers.get(event);\n    if (handlers) {\n      handlers.forEach(handler => handler(data));\n    }\n  }\n\n  private isFeatureCollection(data: unknown): data is FeatureCollection {\n    if (!data || typeof data !== \"object\") return false;\n    const d = data as { type?: unknown; features?: unknown };\n    return d.type === \"FeatureCollection\" && Array.isArray(d.features);\n  }\n\n  /**\n   * 销毁渲染器\n   */\n  destroy(): void {\n    if (this.glMap) {\n      this.glMap.destroy();\n    }\n    this.eventHandlers.clear();\n  }\n}\n\n// cleanup\nexport { };","import type { IMapRenderer, MapRendererConfig } from \"../interfaces/IMapRenderer\"\nimport { MapRendererFactory, MapRendererType } from \"../factory/MapRendererFactory\"\nimport { UnifiedMapComponent, type UnifiedMapConfig } from \"../adapters/UnifiedMapComponent\"\n\n/**\n * 创建地图渲染器的便捷函数\n * @param type 渲染器类型\n * @param config 渲染器配置\n * @returns 地图渲染器实例\n */\nexport function createMapRenderer(\n  type: MapRendererType,\n  config: MapRendererConfig\n): IMapRenderer {\n  return MapRendererFactory.createRenderer(type, config)\n}\n\n/**\n * 创建统一地图组件的便捷函数\n * @param config 统一地图配置\n * @returns 统一地图组件实例\n */\nexport function createUnifiedMap(config: UnifiedMapConfig): UnifiedMapComponent {\n  return new UnifiedMapComponent(config)\n}\n\n/**\n * 快速创建 ECharts 地图\n * @param config 地图配置\n * @returns 地图渲染器实例\n */\nexport function createEchartsMap(config: MapRendererConfig): IMapRenderer {\n  return createMapRenderer(MapRendererType.ECHARTS, config)\n}\n\n/**\n * 快速创建 DeckGL 地图\n * @param config 地图配置\n * @returns 地图渲染器实例\n */\nexport function createDeckglMap(config: MapRendererConfig): IMapRenderer {\n  return createMapRenderer(MapRendererType.DECKGL, config)\n}","/**\n * 地图渲染器常量定义\n */\n\n/**\n * 地图渲染器类型\n */\nexport const MAP_RENDERER_TYPES = {\n  ECHARTS: 'echarts',\n  DECKGL: 'deckgl'\n} as const\n\n/**\n * 渲染模式\n */\nexport const RENDER_MODES = {\n  MODE_2D: '2d',\n  MODE_3D: '3d'\n} as const\n\n/**\n * 默认配置\n */\nexport const DEFAULT_CONFIG = {\n  ZOOM: 10,\n  CENTER: { lat: 39.9, lng: 116.3 },\n  MODE: RENDER_MODES.MODE_2D,\n  INTERACTIVE: true,\n  SHOW_CONTROLS: false\n} as const\n\n/**\n * 事件类型\n */\nexport const EVENT_TYPES = {\n  POINT_CLICK: 'pointClick',\n  POINT_HOVER: 'pointHover',\n  LINE_CLICK: 'lineClick',\n  LINE_HOVER: 'lineHover',\n  MAP_CLICK: 'mapClick',\n  ZOOM: 'zoom',\n  PAN: 'pan'\n} as const\n"],"mappings":"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","names":["MapRendererType","props","import_layers","import_utils","import_layers"]}